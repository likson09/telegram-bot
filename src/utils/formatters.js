/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ
 */

class Formatters {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    static formatDateShort(dateString) {
        if (!dateString) return '??.??';
        
        try {
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            if (dateString.includes('.')) {
                const parts = dateString.split('.');
                if (parts.length >= 2) {
                    return `${parts[0]}.${parts[1]}`; // –î–î.–ú–ú
                }
            } else if (dateString.includes('-')) {
                const parts = dateString.split('-');
                if (parts.length >= 2) {
                    return `${parts[2]}.${parts[1]}`; // –ì–ì–ì–ì-–ú–ú-–î–î -> –î–î.–ú–ú
                }
            } else if (dateString.includes('/')) {
                const parts = dateString.split('/');
                if (parts.length >= 2) {
                    return `${parts[1]}.${parts[0]}`; // –ú–ú/–î–î -> –î–î.–ú–ú
                }
            }
            
            return dateString.slice(0, 5); // –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
        } catch {
            return dateString.slice(0, 5);
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ)
    static formatTime(timeString) {
        if (!timeString) return '??:??';
        
        try {
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–¥–æ –¥–µ—Ñ–∏—Å–∞)
            return timeString.split('-')[0].trim();
        } catch {
            return timeString.slice(0, 5);
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞/–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    static formatDepartment(dept) {
        if (!dept) return '???';
        
        const shortNames = {
            '—Å–∫–ª–∞–¥': '–°–ö–õ',
            '—Ç–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª': '–¢–ó',
            '–∫–∞—Å—Å–∞': '–ö–°',
            '–∫–ª–∞–¥–æ–≤–∞—è': '–ö–õ',
            '–ø—Ä–∏–µ–º–∫–∞': '–ü–†',
            '–≤—ã–¥–∞—á–∞': '–í–î',
            '–ª–æ–≥–∏—Å—Ç–∏–∫–∞': '–õ–ì',
            '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è': '–ê–î–ú',
            '–º–µ—Ä—á–∞–Ω–¥–∞–π–∑–∏–Ω–≥': '–ú–ß',
            '–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π': '–û–ü'
        };
        
        const lowerDept = dept.toLowerCase().trim();
        return shortNames[lowerDept] || dept.slice(0, 3).toUpperCase();
    }

    // –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –§–ò–û
    static truncateName(fullName, maxLength = 15) {
        if (!fullName) return '???';
        
        const parts = fullName.trim().split(' ');
        
        if (parts.length >= 3) {
            // –ò–≤–∞–Ω–æ–≤ –ò.–ò.
            return `${parts[0]} ${parts[1][0]}.${parts[2][0]}.`;
        }
        if (parts.length === 2) {
            // –ò–≤–∞–Ω–æ–≤ –ò.
            return `${parts[0]} ${parts[1][0]}.`;
        }
        
        // –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        return fullName.length > maxLength ? 
            fullName.slice(0, maxLength - 1) + '‚Ä¶' : fullName;
    }

    // –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    static smartText(text, maxLength = 20) {
        if (!text) return '';
        
        // –ó–∞–º–µ–Ω—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        const replacements = {
            '–ø–æ–¥—Ä–∞–±–æ—Ç–∫': '–ø–æ–¥—Ä-–∫–∞',
            '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': '–∞–¥–º–∏–Ω',
            '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω': '–ø–æ–¥—Ç–≤.',
            '–æ–∂–∏–¥–∞–µ—Ç': '–∂–¥–µ—Ç',
            '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': '—Å—Ç–∞—Ç-–∫–∞',
            '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': '–ø—Ä-—Å—Ç—å',
            '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': '—É–ø—Ä-–Ω–∏–µ',
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': '–∫–æ–ª-–≤–æ',
            '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π': '–¥–æ–ø.',
            '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ': '–ø–æ–¥—Ç–≤.',
            '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': '—Ä–∞—Å–ø–∏—Å.',
            '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': '–∏–Ω—Ñ–æ',
            '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ': '—É–≤–µ–¥–æ–º.',
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': '–ø—Ä–∏–ª.',
            '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è': '–∫–æ–Ω—Ñ–∏–≥'
        };
        
        let result = text;
        
        // –ó–∞–º–µ–Ω—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        for (const [long, short] of Object.entries(replacements)) {
            result = result.replace(new RegExp(long, 'gi'), short);
        }
        
        // –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if (result.length > maxLength) {
            return result.slice(0, maxLength - 1) + '‚Ä¶';
        }
        
        return result;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    static formatNumber(number) {
        if (number === null || number === undefined) return '0';
        return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    static formatPercent(value, total) {
        if (!total || total === 0) return '0%';
        const percentage = Math.round((value / total) * 100);
        return `${percentage}%`;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    static formatTimeRange(start, end) {
        if (!start || !end) return '??:??-??:??';
        return `${this.formatTime(start)}-${this.formatTime(end)}`;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    static formatDateTime(dateString, timeString) {
        return `${this.formatDateShort(dateString)} ${this.formatTime(timeString)}`;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã
    static formatShiftStatus(status) {
        const statusMap = {
            'active': '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞',
            'completed': 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'inactive': '‚ö´ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞',
            'pending': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ'
        };
        
        return statusMap[status] || status;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
    static formatApplicationStatus(status) {
        const statusMap = {
            'approved': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
            'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'signed': 'üìù –ó–∞–ø–∏—Å–∞–Ω–∞'
        };
        
        return statusMap[status] || status;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    static formatLongText(text, maxLineLength = 40) {
        if (!text) return '';
        
        const words = text.split(' ');
        let currentLine = '';
        const lines = [];
        
        for (const word of words) {
            if ((currentLine + word).length > maxLineLength) {
                lines.push(currentLine);
                currentLine = word + ' ';
            } else {
                currentLine += word + ' ';
            }
        }
        
        if (currentLine) {
            lines.push(currentLine);
        }
        
        return lines.join('\n');
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    static formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    static formatRelativeTime(timestamp) {
        const now = Date.now();
        const diff = now - timestamp;
        
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);
        
        if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
        if (days < 7) return `${days} –¥ –Ω–∞–∑–∞–¥`;
        
        return new Date(timestamp).toLocaleDateString();
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    static formatProgressBar(current, total, length = 10) {
        if (total === 0) return '[' + '‚ñë'.repeat(length) + ']';
        
        const percentage = current / total;
        const filled = Math.round(length * percentage);
        const empty = length - filled;
        
        return '[' + '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty) + ']';
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
    static formatRating(rating, max = 5) {
        const fullStars = Math.floor(rating);
        const halfStar = rating % 1 >= 0.5;
        const emptyStars = max - fullStars - (halfStar ? 1 : 0);
        
        return '‚≠ê'.repeat(fullStars) + 
               (halfStar ? '‚ú®' : '') + 
               '‚òÜ'.repeat(emptyStars);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º
    static formatCurrency(amount, currency = '‚ÇΩ') {
        return this.formatNumber(amount) + ' ' + currency;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    static formatPhone(phone) {
        if (!phone) return '';
        
        const cleaned = phone.replace(/\D/g, '');
        
        if (cleaned.length === 11) {
            return `+${cleaned[0]} (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7, 9)}-${cleaned.slice(9)}`;
        }
        if (cleaned.length === 10) {
            return `+7 (${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 8)}-${cleaned.slice(8)}`;
        }
        
        return phone;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Å –∫—Ä–∞—Å–∏–≤—ã–º –≤—ã–≤–æ–¥–æ–º
    static formatJSON(obj, indent = 2) {
        try {
            return JSON.stringify(obj, null, indent);
        } catch {
            return String(obj);
        }
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Å–∏–º–≤–æ–ª–æ–≤
    static escapeMarkdown(text) {
        if (!text) return '';
        
        return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    static createHeader(title, width = 30) {
        const padding = Math.max(0, Math.floor((width - title.length - 2) / 2));
        const line = '‚ïê'.repeat(width);
        const paddedTitle = ' '.repeat(padding) + title + ' '.repeat(padding);
        
        return `${line}\n${paddedTitle}\n${line}`;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    static formatListWithPagination(items, page = 1, pageSize = 10) {
        const totalPages = Math.ceil(items.length / pageSize);
        const startIndex = (page - 1) * pageSize;
        const endIndex = Math.min(startIndex + pageSize, items.length);
        const pageItems = items.slice(startIndex, endIndex);
        
        return {
            items: pageItems,
            pagination: {
                current: page,
                total: totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1,
                totalItems: items.length
            }
        };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static generateUserColor(userId) {
        const colors = [
            '#FF6B6B', '#4ECDC4', '#45B7D1', '#F9A826', 
            '#6C5CE7', '#00B894', '#FD79A8', '#FDCB6E',
            '#00CEC9', '#546DE5', '#E17055', '#D63031'
        ];
        
        const index = Math.abs(this.hashCode(userId.toString())) % colors.length;
        return colors[index];
    }

    // –•—ç—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞
    static hashCode(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = ((hash << 5) - hash) + str.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
module.exports = {
    formatDateShort: Formatters.formatDateShort,
    formatTime: Formatters.formatTime,
    formatDepartment: Formatters.formatDepartment,
    truncateName: Formatters.truncateName,
    smartText: Formatters.smartText,
    formatNumber: Formatters.formatNumber,
    formatPercent: Formatters.formatPercent,
    formatTimeRange: Formatters.formatTimeRange,
    formatDateTime: Formatters.formatDateTime,
    formatShiftStatus: Formatters.formatShiftStatus,
    formatApplicationStatus: Formatters.formatApplicationStatus,
    formatLongText: Formatters.formatLongText,
    formatFileSize: Formatters.formatFileSize,
    formatRelativeTime: Formatters.formatRelativeTime,
    formatProgressBar: Formatters.formatProgressBar,
    formatRating: Formatters.formatRating,
    formatCurrency: Formatters.formatCurrency,
    formatPhone: Formatters.formatPhone,
    formatJSON: Formatters.formatJSON,
    escapeMarkdown: Formatters.escapeMarkdown,
    createHeader: Formatters.createHeader,
    formatListWithPagination: Formatters.formatListWithPagination,
    generateUserColor: Formatters.generateUserColor,
    
    // –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    Formatters
};