const ShiftService = require('../services/shift-service');
const AdminService = require('../services/admin-service');
const { formatDateShort, truncateName } = require('../../utils/formatters');

function setupShiftHandlers(bot) {
    let shiftService = null;
    let adminService = null;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    async function getServices() {
        if (!shiftService) {
            shiftService = new ShiftService();
            await shiftService.connect();
        }
        if (!adminService) {
            adminService = new AdminService();
            await adminService.connect();
        }
        return { shiftService, adminService };
    }

    // –ö–æ–º–∞–Ω–¥–∞ /podrabotka –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω
    bot.command('podrabotka', async (ctx) => {
        try {
            const { adminService } = await getServices();
            const userId = ctx.from.id;
            const isUserAdmin = await adminService.isAdmin(userId);
            
            if (!isUserAdmin) {
                await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–º–µ–Ω—ã.');
                return;
            }

            ctx.session.creatingShift = true;
            ctx.session.shiftData = {};
            
            await ctx.reply('üìù *–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –°–ú–ï–ù–´ –î–õ–Ø –ü–û–î–†–ê–ë–û–¢–ö–ò*\n\n' +
                           '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:\n\n' +
                           '1. üìÖ *–î–∞—Ç–∞* (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)\n' +
                           '2. ‚è∞ *–í—Ä–µ–º—è* (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú-–ß–ß:–ú–ú)\n' + 
                           '3. üè¢ *–û—Ç–¥–µ–ª/–º–µ—Å—Ç–æ*\n' +
                           '4. üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫*\n\n' +
                           '–ü—Ä–∏–º–µ—Ä:\n' +
                           '15.01.2024\n' +
                           '14:00-22:00\n' +
                           '–°–∫–ª–∞–¥\n' +
                           '3', {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', callback_data: 'cancel_creation' }
                    ]]
                }
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /podrabotka:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è
    bot.action('cancel_creation', async (ctx) => {
        ctx.session.creatingShift = false;
        ctx.session.shiftData = {};
        await ctx.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        await ctx.answerCbQuery();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã
    bot.on('text', async (ctx) => {
        if (ctx.message.text.startsWith('/')) return;
        if (!ctx.session.creatingShift) return;

        try {
            const { shiftService, adminService } = await getServices();
            const isUserAdmin = await adminService.isAdmin(ctx.from.id);
            
            if (!isUserAdmin) {
                ctx.session.creatingShift = false;
                ctx.session.shiftData = {};
                await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                return;
            }

            const text = ctx.message.text.trim();
            
            if (!ctx.session.shiftData.date) {
                // –í–≤–æ–¥ –¥–∞—Ç—ã
                if (!/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
                    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 15.01.2024');
                    return;
                }
                ctx.session.shiftData.date = text;
                await ctx.reply('‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú-–ß–ß:–ú–ú)\n–ü—Ä–∏–º–µ—Ä: 14:00-22:00');
                return;
            }
            
            if (!ctx.session.shiftData.time) {
                // –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
                if (!/^\d{2}:\d{2}-\d{2}:\d{2}$/.test(text)) {
                    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 14:00-22:00');
                    return;
                }
                ctx.session.shiftData.time = text;
                await ctx.reply('‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\nüè¢ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–ª–∏ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã\n–ü—Ä–∏–º–µ—Ä: –°–∫–ª–∞–¥ –∏–ª–∏ –¢–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª');
                return;
            }
            
            if (!ctx.session.shiftData.department) {
                // –í–≤–æ–¥ –æ—Ç–¥–µ–ª–∞
                ctx.session.shiftData.department = text;
                await ctx.reply('‚úÖ –û—Ç–¥–µ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\nüë• –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö —á–µ–ª–æ–≤–µ–∫ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É)\n–ü—Ä–∏–º–µ—Ä: 3');
                return;
            }
            
            if (!ctx.session.shiftData.requiredPeople) {
                // –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π
                const peopleCount = parseInt(text);
                if (isNaN(peopleCount) || peopleCount <= 0) {
                    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0\n–ü—Ä–∏–º–µ—Ä: 3');
                    return;
                }
                ctx.session.shiftData.requiredPeople = peopleCount;
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                const validationErrors = shiftService.validateShiftData(ctx.session.shiftData);
                if (validationErrors.length > 0) {
                    await ctx.reply(`‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n${validationErrors.join('\n')}`);
                    return;
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º —Å–µ—Å—Å–∏–∏
                const shiftData = { ...ctx.session.shiftData };
                
                // –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—É
                const shiftId = await shiftService.createShift(shiftData);
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                ctx.session.creatingShift = false;
                ctx.session.shiftData = {};
                
                await ctx.reply(
                    '‚úÖ *–°–ú–ï–ù–ê –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!*\n\n' +
                    `üÜî ID —Å–º–µ–Ω—ã: ${shiftId}\n` +
                    `üìÖ –î–∞—Ç–∞: ${shiftData.date}\n` +
                    `‚è∞ –í—Ä–µ–º—è: ${shiftData.time}\n` +
                    `üè¢ –û—Ç–¥–µ–ª: ${shiftData.department}\n` +
                    `üë• –ù—É–∂–Ω–æ —á–µ–ª–æ–≤–µ–∫: ${shiftData.requiredPeople}\n\n` +
                    '–¢–µ–ø–µ—Ä—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É —Å–º–µ–Ω—É! üöÄ',
                    { parse_mode: 'Markdown' }
                );
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–º–µ–Ω—ã:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            ctx.session.creatingShift = false;
            ctx.session.shiftData = {};
        }
    });

    // –î–µ—Ç–∞–ª–∏ —Å–º–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.action(/^admin_shift_detail_/, async (ctx) => {
        try {
            const { shiftService, adminService } = await getServices();
            const isAdmin = await adminService.isAdmin(ctx.from.id);
            
            if (!isAdmin) {
                await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                return;
            }

            const callbackData = ctx.callbackQuery.data;
            const shiftId = callbackData.replace('admin_shift_detail_', '');
            
            const shiftDetails = await shiftService.getShiftDetails(shiftId);
            
            const message = `üìã *–î–ï–¢–ê–õ–ò –°–ú–ï–ù–´ #${shiftId}*\n\n` +
                           `üìÖ *–î–∞—Ç–∞:* ${shiftDetails.date}\n` +
                           `‚è∞ *–í—Ä–µ–º—è:* ${shiftDetails.time}\n` +
                           `üè¢ *–û—Ç–¥–µ–ª:* ${shiftDetails.department}\n` +
                           `üë• *–¢—Ä–µ–±—É–µ—Ç—Å—è:* ${shiftDetails.requiredPeople} —á–µ–ª.\n` +
                           `‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:* ${shiftDetails.approved.length}/${shiftDetails.requiredPeople}\n` +
                           `‚è≥ *–û–∂–∏–¥–∞—é—Ç:* ${shiftDetails.pendingApproval.length}\n` +
                           `üìù *–ó–∞–ø–∏—Å–∞–ª–∏—Å—å:* ${shiftDetails.signedUp.length}\n\n` +
                           `üìä *–°—Ç–∞—Ç—É—Å:* ${shiftDetails.status}\n` +
                           `üéØ *–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å:* ${shiftDetails.fulfillmentPercentage}%\n` +
                           `üì¶ *–°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞:* ${shiftDetails.availableSlots}`;

            const actionKeyboard = [
                [
                    { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É', callback_data: `admin_complete_shift_${shiftId}` },
                    { text: '‚ö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: `admin_deactivate_shift_${shiftId}` }
                ],
                [
                    { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `admin_edit_shift_${shiftId}` }
                ],
                [
                    { text: '‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Å–º–µ–Ω', callback_data: 'admin_shifts' }
                ]
            ];

            // –ï—Å–ª–∏ —Å–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏
            if (shiftDetails.status !== 'active') {
                actionKeyboard[0] = [
                    { text: '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: `admin_activate_shift_${shiftId}` }
                ];
            }

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: actionKeyboard }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π');
        }
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
    bot.action(/^admin_complete_shift_/, async (ctx) => {
        try {
            const { shiftService, adminService } = await getServices();
            const isAdmin = await adminService.isAdmin(ctx.from.id);
            
            if (!isAdmin) {
                await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                return;
            }

            const callbackData = ctx.callbackQuery.data;
            const shiftId = callbackData.replace('admin_complete_shift_', '');
            
            await shiftService.completeShift(shiftId);
            await ctx.answerCbQuery('‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.editMessageText(`‚úÖ *–°–ú–ï–ù–ê #${shiftId} –ó–ê–í–ï–†–®–ï–ù–ê!*\n\n–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Å–º–µ–Ω', callback_data: 'admin_shifts' }]
                    ]
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã');
        }
    });

    // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–º–µ–Ω—ã
    bot.action(/^admin_deactivate_shift_/, async (ctx) => {
        try {
            const { shiftService, adminService } = await getServices();
            const isAdmin = await adminService.isAdmin(ctx.from.id);
            
            if (!isAdmin) {
                await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                return;
            }

            const callbackData = ctx.callbackQuery.data;
            const shiftId = callbackData.replace('admin_deactivate_shift_', '');
            
            await shiftService.deactivateShift(shiftId);
            await ctx.answerCbQuery('‚úÖ –°–º–µ–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');
            
            await ctx.editMessageText(`‚úÖ *–°–ú–ï–ù–ê #${shiftId} –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!*\n\n–°–º–µ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Å–º–µ–Ω', callback_data: 'admin_shifts' }]
                    ]
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–º–µ–Ω—ã:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–º–µ–Ω—ã');
        }
    });

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–º–µ–Ω—ã
    bot.action(/^admin_activate_shift_/, async (ctx) => {
        try {
            const { shiftService, adminService } = await getServices();
            const isAdmin = await adminService.isAdmin(ctx.from.id);
            
            if (!isAdmin) {
                await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                return;
            }

            const callbackData = ctx.callbackQuery.data;
            const shiftId = callbackData.replace('admin_activate_shift_', '');
            
            await shiftService.updateShiftStatus(shiftId, 'active');
            await ctx.answerCbQuery('‚úÖ –°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');
            
            await ctx.editMessageText(`‚úÖ *–°–ú–ï–ù–ê #${shiftId} –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!*\n\n–°–º–µ–Ω–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Å–º–µ–Ω', callback_data: 'admin_shifts' }]
                    ]
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–º–µ–Ω—ã:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–º–µ–Ω—ã');
        }
    });

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞)
    bot.action(/^admin_edit_shift_/, async (ctx) => {
        await ctx.answerCbQuery('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω
    bot.action('admin_shifts_stats', async (ctx) => {
        try {
            const { shiftService, adminService } = await getServices();
            const isAdmin = await adminService.isAdmin(ctx.from.id);
            
            if (!isAdmin) {
                await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                return;
            }

            const stats = await shiftService.getShiftsStats();
            
            if (!stats) {
                await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
                return;
            }

            const statsMessage = `üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ú–ï–ù*\n\n` +
                               `üìÖ *–í—Å–µ–≥–æ —Å–º–µ–Ω:* ${stats.total}\n` +
                               `‚úÖ *–ê–∫—Ç–∏–≤–Ω—ã—Ö:* ${stats.active}\n` +
                               `üèÅ *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö:* ${stats.completed}\n` +
                               `‚ö´ *–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö:* ${stats.inactive}\n\n` +
                               `üìù *–ó–∞—è–≤–∫–∏:*\n` +
                               `‚îú –í—Å–µ–≥–æ: ${stats.totalApplications}\n` +
                               `‚îú –û–∂–∏–¥–∞—é—Ç: ${stats.pendingApplications}\n` +
                               `‚îî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${stats.approvedApplications}\n\n` +
                               `üìà *–°—Ä–µ–¥–Ω—è—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å:* ${stats.averageFulfillment}%`;

            const statsMenu = [
                [
                    { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_shifts_stats' }
                ],
                [
                    { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'admin_shifts' }
                ]
            ];

            await ctx.editMessageText(statsMessage, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: statsMenu }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    });

    // –ü–æ–∏—Å–∫ —Å–º–µ–Ω –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    bot.action('admin_find_shifts', async (ctx) => {
        try {
            const { shiftService, adminService } = await getServices();
            const isAdmin = await adminService.isAdmin(ctx.from.id);
            
            if (!isAdmin) {
                await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                return;
            }

            ctx.session.adminAction = 'find_shifts';
            await ctx.editMessageText('üîç *–ü–û–ò–°–ö –°–ú–ï–ù*\n\n–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n\n' +
                                   '–§–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞ –æ—Ç–¥–µ–ª\n' +
                                   '–ü—Ä–∏–º–µ—Ä: 15.01.2024 –°–∫–ª–∞–¥\n\n' +
                                   '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞', {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_shifts' }]
                    ]
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–º–µ–Ω:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–º–µ–Ω
    bot.on('text', async (ctx) => {
        if (ctx.message.text.startsWith('/')) return;
        if (ctx.session.adminAction !== 'find_shifts') return;

        try {
            const { shiftService } = await getServices();
            const searchText = ctx.message.text.trim();
            
            let criteria = {};
            
            // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (searchText.includes(' ')) {
                const parts = searchText.split(' ');
                criteria.date = parts[0];
                criteria.department = parts.slice(1).join(' ');
            } else {
                criteria.date = searchText;
            }
            
            const foundShifts = await shiftService.findShiftsByCriteria(criteria);
            
            if (foundShifts.length === 0) {
                await ctx.reply('‚ùå *–°–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.', {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'admin_find_shifts' }],
                            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'admin_shifts' }]
                        ]
                    }
                });
                return;
            }

            let message = `üîç *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê*\n\n–ù–∞–π–¥–µ–Ω–æ ${foundShifts.length} —Å–º–µ–Ω:\n\n`;
            
            foundShifts.forEach((shift, index) => {
                message += `${index + 1}. üìÖ ${shift.date} ${shift.time}\n`;
                message += `   üè¢ ${shift.department}\n`;
                message += `   üë• ${shift.approved.length}/${shift.requiredPeople} —á–µ–ª.\n`;
                message += `   üìä ${shift.status}\n\n`;
            });

            const shiftsKeyboard = foundShifts.map(shift => [
                { 
                    text: `üìÖ ${formatDateShort(shift.date)}`, 
                    callback_data: `admin_shift_detail_${shift.id}`
                }
            ]);

            shiftsKeyboard.push([{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'admin_shifts' }]);

            await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: shiftsKeyboard }
            });
            
            ctx.session.adminAction = null;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–º–µ–Ω:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–º–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            ctx.session.adminAction = null;
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    bot.command('debug_shifts', async (ctx) => {
        try {
            const { shiftService, adminService } = await getServices();
            const isAdmin = await adminService.isAdmin(ctx.from.id);
            
            if (!isAdmin) {
                await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                return;
            }

            const shifts = await shiftService.getAllShifts();
            
            let debugInfo = 'üîç *–î–ï–ë–ê–ì –°–ú–ï–ù:*\n\n';
            
            shifts.forEach((shift, index) => {
                debugInfo += `*–°–º–µ–Ω–∞ ${index + 1}:* ${shift.date} ${shift.time} (${shift.department})\n`;
                debugInfo += `üë• –ù—É–∂–Ω–æ: ${shift.requiredPeople}, –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${shift.approved.length}, –û–∂–∏–¥–∞—é—Ç: ${shift.pendingApproval.length}\n`;
                debugInfo += `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: ${shift.approved.join(', ') || '–Ω–µ—Ç'}\n`;
                debugInfo += `‚è≥ –û–∂–∏–¥–∞—é—Ç: ${shift.pendingApproval.join(', ') || '–Ω–µ—Ç'}\n`;
                debugInfo += `üìù –ó–∞–ø–∏—Å–∞–Ω—ã: ${shift.signedUp.join(', ') || '–Ω–µ—Ç'}\n\n`;
            });

            await ctx.reply(debugInfo, { parse_mode: 'Markdown' });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ —Å–º–µ–Ω:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ —Å–º–µ–Ω');
        }
    });
}

module.exports = { setupShiftHandlers };