const ShiftService = require('../services/shift-service');
const UserService = require('../services/user-service');
const { formatDateShort, truncateName } = require('../../utils/formatters');

function setupApplicationHandlers(bot) {
    let shiftService = null;
    let userService = null;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    async function getServices() {
        if (!shiftService) {
            shiftService = new ShiftService();
            await shiftService.connect();
        }
        if (!userService) {
            userService = new UserService();
            await userService.connect();
        }
        return { shiftService, userService };
    }

    // –ú–µ–Ω—é –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫
    bot.action('menu_show_work', async (ctx) => {
        try {
            const { userService } = await getServices();
            const fullFio = ctx.session.userFio;

            if (!fullFio) {
                await ctx.answerCbQuery('‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const workMenu = [
                [
                    { text: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã', callback_data: 'work_shifts_list' },
                    { text: 'üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'work_my_applications' }
                ],
                [
                    { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'menu_back_main' }
                ]
            ];

            await ctx.editMessageText(`üíº *–ü–û–î–†–ê–ë–û–¢–ö–ò*\n\nüë§ ${fullFio}`, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: workMenu }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é', {
                reply_markup: { inline_keyboard: createBackButton('menu_back_main') }
            });
        }
    });

    // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω
    bot.action('work_shifts_list', async (ctx) => {
        try {
            const { shiftService, userService } = await getServices();
            const fullFio = ctx.session.userFio;

            if (!fullFio) {
                await ctx.answerCbQuery('‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            await userService.saveUser(fullFio, ctx.from.id);

            const availableShifts = await shiftService.getAvailableShifts();
            ctx.session.availableShifts = availableShifts;
            
            if (availableShifts.length === 0) {
                await ctx.editMessageText('üì≠ *–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –¥–ª—è –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏.*', {
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: [[{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'menu_show_work' }]] }
                });
                return;
            }

            const shiftsKeyboard = availableShifts.map(shift => [
                { 
                    text: `üìÖ ${formatDateShort(shift.date)} ${shift.time}`, 
                    callback_data: `shift_detail_${shift.id}`
                }
            ]);

            shiftsKeyboard.push([{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'menu_show_work' }]);

            await ctx.editMessageText(`üìã *–î–û–°–¢–£–ü–ù–´–ï –°–ú–ï–ù–´*\n\n–ù–∞–π–¥–µ–Ω–æ ${availableShifts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω:`, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: shiftsKeyboard }
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–º–µ–Ω:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–º–µ–Ω');
        }
    });

    // –î–µ—Ç–∞–ª–∏ —Å–º–µ–Ω—ã
    bot.action(/^shift_detail_/, async (ctx) => {
        try {
            const { shiftService } = await getServices();
            const callbackData = ctx.callbackQuery.data;
            const shiftId = callbackData.replace('shift_detail_', '');
            const fullFio = ctx.session.userFio;

            if (!fullFio) {
                await ctx.answerCbQuery('‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const shift = await shiftService.getShiftById(shiftId);
            
            if (!shift) {
                await ctx.answerCbQuery('‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                await ctx.editMessageText('‚ùå *–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*', {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'work_shifts_list' }],
                            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'menu_show_work' }]
                        ]
                    }
                });
                return;
            }

            const shiftInfo = `üìÖ *–î–ï–¢–ê–õ–ò –°–ú–ï–ù–´*\n\n` +
                             `üóìÔ∏è *–î–∞—Ç–∞:* ${shift.date}\n` +
                             `‚è∞ *–í—Ä–µ–º—è:* ${shift.time}\n` +
                             `üè¢ *–û—Ç–¥–µ–ª:* ${shift.department}\n` +
                             `üë• *–¢—Ä–µ–±—É–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫:* ${shift.requiredPeople}\n` +
                             `‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:* ${shift.approved.length}/${shift.requiredPeople}\n` +
                             `‚è≥ *–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:* ${shift.pendingApproval.length}\n\n`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userStatus = [];
            const userInApproved = shift.approved.some(item => item.startsWith(fullFio + '|'));
            const userInPending = shift.pendingApproval.some(item => item.startsWith(fullFio + '|'));
            const userInSigned = shift.signedUp.some(item => item.startsWith(fullFio + '|'));

            if (userInApproved) {
                userStatus.push('‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º*');
            } else if (userInPending) {
                userStatus.push('‚è≥ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏*');
            } else if (userInSigned) {
                userStatus.push('üìù *–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Å–º–µ–Ω—É*');
            }
            
            let statusMessage = '';
            if (userStatus.length > 0) {
                statusMessage = `${userStatus.join('\n')}\n\n`;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –µ—â–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è
            const availableSlots = shift.requiredPeople - (shift.approved.length + shift.pendingApproval.length);
            let actionMessage = '';
            
            if (availableSlots <= 0) {
                actionMessage = '‚ùå *–ú–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç*\n–ù–∞ —ç—Ç—É —Å–º–µ–Ω—É —É–∂–µ –Ω–∞–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫.';
            } else if (userInApproved) {
                actionMessage = 'üéâ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* –ñ–¥–µ–º –≤–∞—Å –Ω–∞ —Å–º–µ–Ω–µ.';
            } else if (userInPending || userInSigned) {
                actionMessage = '‚ÑπÔ∏è *–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É* –Ω–∞ —ç—Ç—É —Å–º–µ–Ω—É.';
            } else {
                actionMessage = `‚úÖ *–ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞:* ${availableSlots} –∏–∑ ${shift.requiredPeople}`;
            }

            const detailKeyboard = [];

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω
            if (availableSlots > 0 && !userInApproved && !userInPending && !userInSigned) {
                detailKeyboard.push([
                    { 
                        text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–º–µ–Ω—É', 
                        callback_data: `shift_signup_${shiftId}`
                    }
                ]);
            }

            detailKeyboard.push([
                { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'work_shifts_list' }
            ]);

            const fullMessage = shiftInfo + statusMessage + actionMessage;

            await ctx.editMessageText(fullMessage, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: detailKeyboard }
            });
            
            await ctx.answerCbQuery();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã:', error);
            await ctx.editMessageText('‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã*', {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'work_shifts_list' }],
                        [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'menu_show_work' }]
                    ]
                }
            });
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã');
        }
    });

    // –ó–∞–ø–∏—Å—å –Ω–∞ —Å–º–µ–Ω—É
    bot.action(/^shift_signup_/, async (ctx) => {
        try {
            const { shiftService, userService } = await getServices();
            const callbackData = ctx.callbackQuery.data;
            const shiftId = callbackData.replace('shift_signup_', '');
            const fullFio = ctx.session.userFio;

            if (!fullFio) {
                await ctx.answerCbQuery('‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const result = await shiftService.signUpForShift(ctx.from.id, fullFio, shiftId);
            
            if (result.success) {
                await ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.');
                
                await ctx.editMessageText('‚úÖ *–ó–ê–Ø–í–ö–ê –ü–û–î–ê–ù–ê!*\n\n' +
                                       `üìÖ –°–º–µ–Ω–∞: ${result.shift.date} ${result.shift.time}\n` +
                                       `üè¢ –û—Ç–¥–µ–ª: ${result.shift.department}\n` +
                                       `‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n` +
                                       `–û—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ${result.availableSlots}`, {
                    parse_mode: 'Markdown',
                    reply_markup: { 
                        inline_keyboard: [
                            [{ text: 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'work_my_applications' }],
                            [{ text: '‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Å–º–µ–Ω', callback_data: 'work_shifts_list' }]
                        ]
                    }
                });
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–º–µ–Ω—É:', error);
            await ctx.answerCbQuery(`‚ùå ${error.message}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await ctx.editMessageText(`‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:*\n\n${error.message}`, {
                parse_mode: 'Markdown',
                reply_markup: { 
                    inline_keyboard: [
                        [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `shift_detail_${shiftId}` }],
                        [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'work_shifts_list' }]
                    ]
                }
            });
        }
    });

    // –ú–æ–∏ –∑–∞—è–≤–∫–∏
    bot.action('work_my_applications', async (ctx) => {
        try {
            const { userService } = await getServices();
            const fullFio = ctx.session.userFio;

            if (!fullFio) {
                await ctx.answerCbQuery('‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const applications = await userService.getUserApplications(fullFio);

            if (applications.length === 0) {
                await ctx.editMessageText('üì≠ *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É.*', {
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: [[{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'menu_show_work' }]] }
                });
                return;
            }

            let message = 'üìã *–ú–û–ò –ó–ê–Ø–í–ö–ò –ù–ê –ü–û–î–†–ê–ë–û–¢–ö–£:*\n\n';
            
            applications.forEach((app, index) => {
                const userStatus = app.approved.some(item => item.startsWith(fullFio + '|')) ? 
                    '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' : 
                    app.pendingApproval.some(item => item.startsWith(fullFio + '|')) ?
                    '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' : 'üìù –ó–∞–ø–∏—Å–∞–Ω–∞';
                
                const statusIcon = userStatus === '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' ? '‚úÖ' : 
                                 userStatus === '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' ? '‚è≥' : 'üìù';
                
                message += `${index + 1}. ${statusIcon} *${app.date} ${app.time}*\n`;
                message += `   üè¢ ${app.department}\n`;
                message += `   üë• ${app.approved.length}/${app.requiredPeople} —á–µ–ª–æ–≤–µ–∫\n`;
                message += `   üìù ${userStatus}\n\n`;
            });

            message += `*–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:* ${applications.length}`;

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: { 
                    inline_keyboard: [
                        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'work_my_applications' }],
                        [{ text: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã', callback_data: 'work_shifts_list' }],
                        [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'menu_show_work' }]
                    ]
                }
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫');
            
            await ctx.editMessageText('‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫*', {
                parse_mode: 'Markdown',
                reply_markup: { 
                    inline_keyboard: [
                        [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'work_my_applications' }],
                        [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'menu_show_work' }]
                    ]
                }
            });
        }
    });

    // –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–º–µ–Ω—É (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    bot.action(/^shift_cancel_/, async (ctx) => {
        try {
            const { shiftService } = await getServices();
            const callbackData = ctx.callbackQuery.data;
            const shiftId = callbackData.replace('shift_cancel_', '');
            const fullFio = ctx.session.userFio;

            if (!fullFio) {
                await ctx.answerCbQuery('‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const success = await shiftService.cancelSignUp(fullFio, shiftId);
            
            if (success) {
                await ctx.answerCbQuery('‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!');
                
                await ctx.editMessageText('‚úÖ *–ó–ê–ü–ò–°–¨ –û–¢–ú–ï–ù–ï–ù–ê!*\n\n' +
                                       '–í—ã –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Å–º–µ–Ω—É.', {
                    parse_mode: 'Markdown',
                    reply_markup: { 
                        inline_keyboard: [
                            [{ text: 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'work_my_applications' }],
                            [{ text: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã', callback_data: 'work_shifts_list' }]
                        ]
                    }
                });
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏:', error);
            await ctx.answerCbQuery(`‚ùå ${error.message}`);
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏
    bot.command('pod', async (ctx) => {
        try {
            const fullFio = ctx.session.userFio;
            
            if (!fullFio) {
                await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û');
                return;
            }

            const { shiftService } = await getServices();
            const availableShifts = await shiftService.getAvailableShifts();
            
            if (availableShifts.length === 0) {
                await ctx.reply('üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –¥–ª—è –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏.');
                return;
            }

            const shiftsKeyboard = availableShifts.map(shift => [
                { 
                    text: `üìÖ ${formatDateShort(shift.date)} ${shift.time}`, 
                    callback_data: `shift_detail_${shift.id}`
                }
            ]);

            await ctx.reply('üíº *–ë–´–°–¢–†–ê–Ø –ó–ê–ü–ò–°–¨ –ù–ê –ü–û–î–†–ê–ë–û–¢–ö–£*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:', {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: shiftsKeyboard }
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /pod:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–º–µ–Ω');
        }
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    function createBackButton(backTo = 'menu_show_work') {
        return [
            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: backTo }]
        ];
    }
}

module.exports = { setupApplicationHandlers };