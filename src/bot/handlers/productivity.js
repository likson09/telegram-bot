const UserService = require('../services/user-service');
const { formatDateShort } = require('../../utils/formatters');

function setupProductivityHandlers(bot) {
    let userService = null;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    async function getUserService() {
        if (!userService) {
            userService = new UserService();
            await userService.connect();
        }
        return userService;
    }

    // –ú–µ–Ω—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    bot.action('menu_show_productivity', async (ctx) => {
        try {
            const service = await getUserService();
            const fullFio = ctx.session.userFio;

            if (!fullFio) {
                await ctx.answerCbQuery('‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const currentYear = new Date().getFullYear();
            const currentMonth = new Date().getMonth();
            
            const monthKeyboard = [];
            const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                              '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
            
            // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
            for (let i = 0; i < 6; i++) {
                const monthDate = new Date(currentYear, currentMonth - i, 1);
                const monthName = monthNames[monthDate.getMonth()];
                const year = monthDate.getFullYear();
                const monthIndex = monthDate.getMonth();

                monthKeyboard.push([
                    { 
                        text: `üìÖ ${monthName} ${year}`, 
                        callback_data: `month_${monthIndex}_${year}`
                    }
                ]);
            }
            
            monthKeyboard.push([{ 
                text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 
                callback_data: 'menu_back_main' 
            }]);
            
            const productivityMessage = `üöÄ *–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò*\n\n` +
                                      `üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${fullFio}\n\n` +
                                      `üìä *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:*\n\n` +
                                      `–î–æ—Å—Ç—É–ø–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤`;
            
            await ctx.editMessageText(productivityMessage, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: monthKeyboard }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
            await ctx.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.', {
                reply_markup: { inline_keyboard: createBackButton() }
            });
        }
    });

    // –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
    bot.action(/^month_/, async (ctx) => {
        try {
            const callbackData = ctx.callbackQuery.data;
            const parts = callbackData.split('_');
            
            if (parts.length < 3) {
                await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞');
                return;
            }
            
            const month = parseInt(parts[1]);
            const year = parseInt(parts[2]);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            if (isNaN(month) || isNaN(year) || month < 0 || month > 11) {
                await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
                return;
            }
            
            const service = await getUserService();
            const fullFio = ctx.session.userFio;
    
            if (!fullFio) {
                await ctx.answerCbQuery('‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            
            const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                               '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
            
            const monthName = monthNames[month];
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            const productivityData = await service.getProductivityData(fullFio, year, month + 1);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            ctx.session.currentProductivityData = {
                selectionData: productivityData.selectionData,
                placementData: productivityData.placementData,
                month: month,
                year: year,
                fullFio: fullFio,
                monthName: monthName
            };
    
            const totalSelection = productivityData.totalSelection;
            const totalPlacement = productivityData.totalPlacement;
    
            const message = `üöÄ *–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ó–ê ${monthName.toUpperCase()} ${year}*\n\n` +
                           `üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${fullFio}\n\n` +
                           `üì¶ *–û–¢–ë–û–† –¢–û–í–ê–†–ê*\n` +
                           `‚îú –û–°: ${productivityData.totalOsSelection} –µ–¥.\n` +
                           `‚îú –†–ú: ${productivityData.totalRmSelection} –µ–¥.\n` +
                           `‚îî *–í—Å–µ–≥–æ:* ${totalSelection} –µ–¥.\n\n` +
                           `üìã *–†–ê–ó–ú–ï–©–ï–ù–ò–ï –¢–û–í–ê–†–ê*\n` +
                           `‚îú –û–°: ${productivityData.totalOsPlacement} –µ–¥.\n` +
                           `‚îú –†–ú: ${productivityData.totalRmPlacement} –µ–¥.\n` +
                           `‚îî *–í—Å–µ–≥–æ:* ${totalPlacement} –µ–¥.\n\n` +
                           `üìà *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n` +
                           `‚îú –î–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: ${productivityData.daysWithData}\n` +
                           `‚îú –°—Ä–µ–¥–Ω–∏–π –æ—Ç–±–æ—Ä/–¥–µ–Ω—å: ${productivityData.avgSelectionPerDay} –µ–¥.\n` +
                           `‚îî –°—Ä–µ–¥–Ω–µ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ/–¥–µ–Ω—å: ${productivityData.avgPlacementPerDay} –µ–¥.\n\n` +
                           `üìä *–û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:* ${totalSelection + totalPlacement} –µ–¥.`;
            
            const detailKeyboard = [
                [{ text: 'üìã –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–Ω—è–º', callback_data: `detail_${month}_${year}_1` }], // –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1
                [{ text: 'üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Å—è—Ü', callback_data: 'menu_show_productivity' }],
                [{ text: '‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_back_main' }]
            ];
    
            await safeEditMessage(ctx, message, detailKeyboard);
            await ctx.answerCbQuery();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞:', error);
            await ctx.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                reply_markup: { inline_keyboard: createBackButton('menu_show_productivity') }
            });
            await ctx.answerCbQuery();
        }
    });

// –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Å –¥–∞–Ω–Ω—ã–º–∏)
bot.action(/^detail_/, async (ctx) => {
    try {
        const sessionData = ctx.session.currentProductivityData;
        
        if (!sessionData) {
            await ctx.answerCbQuery('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∑–∞–Ω–æ–≤–æ.');
            return;
        }

        const callbackData = ctx.callbackQuery.data;
        const parts = callbackData.split('_');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
        let page = 1;
        if (parts.length >= 4) {
            page = parseInt(parts[3]) || 1;
        }
        
        const month = parseInt(parts[1]);
        const year = parseInt(parts[2]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏ –∏ callback_data
        if (sessionData.month !== month || sessionData.year !== year) {
            await ctx.answerCbQuery('‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∑–∞–Ω–æ–≤–æ.');
            return;
        }

        const { selectionData, placementData, fullFio, monthName } = sessionData;
        
        let message = `üìã *–î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –î–ù–Ø–ú* ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}\n\n`;
        message += `üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${fullFio}\n`;
        message += `üìÖ *–ü–µ—Ä–∏–æ–¥:* ${monthName} ${year}\n\n`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (!selectionData && !placementData) {
            message += `üì≠ *–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*\n\n–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.`;
            
            const backKeyboard = [
                [{ text: 'üìä –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: `month_${month}_${year}` }],
                [{ text: '‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_back_main' }]
            ];

            await safeEditMessage(ctx, message, backKeyboard);
            await ctx.answerCbQuery();
            return;
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–Ω–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        const daysWithData = [];
        
        for (let day = 1; day <= 31; day++) {
            const selRm = selectionData ? (selectionData[`rm_day_${day}`] || 0) : 0;
            const selOs = selectionData ? (selectionData[`os_day_${day}`] || 0) : 0;
            const plRm = placementData ? (placementData[`rm_day_${day}`] || 0) : 0;
            const plOs = placementData ? (placementData[`os_day_${day}`] || 0) : 0;
            
            if (selRm > 0 || selOs > 0 || plRm > 0 || plOs > 0) {
                daysWithData.push({
                    day: day,
                    selRm: selRm,
                    selOs: selOs,
                    plRm: plRm,
                    plOs: plOs
                });
            }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ–æ–±—â–µ
        if (daysWithData.length === 0) {
            message += `üì≠ *–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*\n\n–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.`;
            
            const backKeyboard = [
                [{ text: 'üìä –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: `month_${month}_${year}` }],
                [{ text: '‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_back_main' }]
            ];

            await safeEditMessage(ctx, message, backKeyboard);
            await ctx.answerCbQuery();
            return;
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        const DAYS_PER_PAGE = 10; // 10 –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const totalPages = Math.ceil(daysWithData.length / DAYS_PER_PAGE);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        page = Math.max(1, Math.min(page, totalPages));
        
        const startIndex = (page - 1) * DAYS_PER_PAGE;
        const endIndex = Math.min(startIndex + DAYS_PER_PAGE, daysWithData.length);
        const currentDays = daysWithData.slice(startIndex, endIndex);

        message += `*–î–Ω–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:* ${startIndex + 1}-${endIndex} –∏–∑ ${daysWithData.length}\n\n`;

        // –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        currentDays.forEach(dayData => {
            const { day, selRm, selOs, plRm, plOs } = dayData;
            
            message += `üìÖ *${day.toString().padStart(2, '0')}.${(month + 1).toString().padStart(2, '0')}.*\n`;
            
            if (selRm > 0 || selOs > 0) {
                message += `üì¶ –û—Ç–±–æ—Ä: `;
                if (selOs > 0) message += `–û–°=${selOs} `;
                if (selRm > 0) message += `–†–ú=${selRm}`;
                message += `\n`;
            }
            
            if (plRm > 0 || plOs > 0) {
                message += `üìã –†–∞–∑–º–µ—â–µ–Ω–∏–µ: `;
                if (plOs > 0) message += `–û–°=${plOs} `;
                if (plRm > 0) message += `–†–ú=${plRm}`;
                message += `\n`;
            }
            message += `\n`;
        });

        message += `*–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}*`;

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        const keyboard = [];
        
        // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        const paginationButtons = [];
        
        if (page > 1) {
            paginationButtons.push({ 
                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 
                callback_data: `detail_${month}_${year}_${page - 1}` 
            });
        }
        
        if (page < totalPages) {
            paginationButtons.push({ 
                text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 
                callback_data: `detail_${month}_${year}_${page + 1}` 
            });
        }
        
        if (paginationButtons.length > 0) {
            keyboard.push(paginationButtons);
        }

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.push(
            [{ text: 'üìä –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: `month_${month}_${year}` }],
            [{ text: 'üìÖ –í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü', callback_data: 'menu_show_productivity' }],
            [{ text: '‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_back_main' }]
        );

        await safeEditMessage(ctx, message, keyboard);
        await ctx.answerCbQuery();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        await ctx.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é.', {
            reply_markup: { inline_keyboard: createBackButton() }
        });
    }
});


    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    bot.command('prod', async (ctx) => {
        try {
            const service = await getUserService();
            const fullFio = ctx.session.userFio;

            if (!fullFio) {
                await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û');
                return;
            }

            const currentDate = new Date();
            const currentYear = currentDate.getFullYear();
            const currentMonth = currentDate.getMonth() + 1;

            const productivityData = await service.getProductivityData(fullFio, currentYear, currentMonth);
            
            const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                               '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
            const monthName = monthNames[currentMonth - 1];

            const message = `üöÄ *–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ó–ê –¢–ï–ö–£–©–ò–ô –ú–ï–°–Ø–¶*\n\n` +
                           `üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${fullFio}\n` +
                           `üìÖ *–ü–µ—Ä–∏–æ–¥:* ${monthName} ${currentYear}\n\n` +
                           `üì¶ *–û—Ç–±–æ—Ä —Ç–æ–≤–∞—Ä–∞:* ${productivityData.totalSelection} –µ–¥.\n` +
                           `üìã *–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:* ${productivityData.totalPlacement} –µ–¥.\n` +
                           `üìä *–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* ${productivityData.totalSelection + productivityData.totalPlacement} –µ–¥.\n\n` +
                           `üìà *–°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n` +
                           `‚îú –û—Ç–±–æ—Ä: ${productivityData.avgSelectionPerDay} –µ–¥./–¥–µ–Ω—å\n` +
                           `‚îî –†–∞–∑–º–µ—â–µ–Ω–∏–µ: ${productivityData.avgPlacementPerDay} –µ–¥./–¥–µ–Ω—å`;

            await ctx.reply(message, { 
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'menu_show_productivity' }],
                        [{ text: '‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_back_main' }]
                    ]
                }
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /prod:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    bot.command('compare', async (ctx) => {
        try {
            const service = await getUserService();
            const fullFio = ctx.session.userFio;

            if (!fullFio) {
                await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û');
                return;
            }

            const currentDate = new Date();
            const currentYear = currentDate.getFullYear();
            const currentMonth = currentDate.getMonth() + 1;
            const prevMonth = currentMonth === 1 ? 12 : currentMonth - 1;
            const prevYear = currentMonth === 1 ? currentYear - 1 : currentYear;

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
            const [currentData, prevData] = await Promise.all([
                service.getProductivityData(fullFio, currentYear, currentMonth),
                service.getProductivityData(fullFio, prevYear, prevMonth)
            ]);

            const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                               '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];

            const currentMonthName = monthNames[currentMonth - 1];
            const prevMonthName = monthNames[prevMonth - 1];

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            const selectionChange = currentData.totalSelection - prevData.totalSelection;
            const placementChange = currentData.totalPlacement - prevData.totalPlacement;
            const totalChange = (currentData.totalSelection + currentData.totalPlacement) - 
                              (prevData.totalSelection + prevData.totalPlacement);

            const selectionTrend = selectionChange > 0 ? 'üìà' : selectionChange < 0 ? 'üìâ' : '‚û°Ô∏è';
            const placementTrend = placementChange > 0 ? 'üìà' : placementChange < 0 ? 'üìâ' : '‚û°Ô∏è';
            const totalTrend = totalChange > 0 ? 'üìà' : totalChange < 0 ? 'üìâ' : '‚û°Ô∏è';

            const message = `üìä *–°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò*\n\n` +
                           `üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${fullFio}\n\n` +
                           `üìÖ *${currentMonthName} ${currentYear}:*\n` +
                           `‚îú üì¶ –û—Ç–±–æ—Ä: ${currentData.totalSelection} –µ–¥. ${selectionTrend}\n` +
                           `‚îú üìã –†–∞–∑–º–µ—â–µ–Ω–∏–µ: ${currentData.totalPlacement} –µ–¥. ${placementTrend}\n` +
                           `‚îî üìä –í—Å–µ–≥–æ: ${currentData.totalSelection + currentData.totalPlacement} –µ–¥. ${totalTrend}\n\n` +
                           `üìÖ *${prevMonthName} ${prevYear}:*\n` +
                           `‚îú üì¶ –û—Ç–±–æ—Ä: ${prevData.totalSelection} –µ–¥.\n` +
                           `‚îú üìã –†–∞–∑–º–µ—â–µ–Ω–∏–µ: ${prevData.totalPlacement} –µ–¥.\n` +
                           `‚îî üìä –í—Å–µ–≥–æ: ${prevData.totalSelection + prevData.totalPlacement} –µ–¥.\n\n` +
                           `üìà *–ò–∑–º–µ–Ω–µ–Ω–∏—è:*\n` +
                           `‚îú –û—Ç–±–æ—Ä: ${selectionChange >= 0 ? '+' : ''}${selectionChange} –µ–¥.\n` +
                           `‚îú –†–∞–∑–º–µ—â–µ–Ω–∏–µ: ${placementChange >= 0 ? '+' : ''}${placementChange} –µ–¥.\n` +
                           `‚îî –û–±—â–µ–µ: ${totalChange >= 0 ? '+' : ''}${totalChange} –µ–¥.`;

            await ctx.reply(message, { 
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'menu_show_productivity' }],
                        [{ text: '‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_back_main' }]
                    ]
                }
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /compare:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        }
    });

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    async function safeEditMessage(ctx, text, markup = null) {
        try {
            if (markup) {
                await ctx.editMessageText(text, { 
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: markup }
                });
            } else {
                await ctx.editMessageText(text, { parse_mode: 'Markdown' });
            }
        } catch (error) {
            if (error.description === 'Bad Request: message is not modified') {
                return;
            }
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            await ctx.reply(text, { 
                parse_mode: 'Markdown',
                reply_markup: markup ? { inline_keyboard: markup } : undefined
            });
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    function createBackButton(backTo = 'menu_show_productivity') {
        return [
            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: backTo }]
        ];
    }
}

module.exports = { setupProductivityHandlers };