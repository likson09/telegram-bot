const { google } = require('googleapis');
const fs = require('fs').promises;
const path = require('path');

class GoogleSheetsService {
    constructor() {
        this.client = null;
        this.spreadsheetId = process.env.SPREADSHEET_ID;
        this.SUPER_ADMIN_ID = parseInt(process.env.SUPER_ADMIN_ID) || 566632489;
    }
    // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å GoogleSheetsService
async isAdmin(userId) {
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        if (userId === this.SUPER_ADMIN_ID) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ Google Sheets
        const adminRanges = ['–ê–¥–º–∏–Ω—ã!A:A', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!A:A', 'Admin!A:A'];
        
        for (const range of adminRanges) {
            try {
                const rows = await this.getValues(range);
                const isAdmin = rows.some(row => 
                    row.some(cell => {
                        const cellValue = cell?.toString().trim();
                        if (!cellValue) return false;
                        
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID (–µ—Å–ª–∏ –≤ —è—á–µ–π–∫–µ —Ñ–æ—Ä–º–∞—Ç "–∏–º—è|id")
                        if (cellValue.includes('|')) {
                            const idPart = cellValue.split('|')[1];
                            return idPart && parseInt(idPart.trim()) === userId;
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —á–∏—Å—Ç–æ–º—É ID
                        return parseInt(cellValue) === userId;
                    })
                );
                
                if (isAdmin) {
                    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${range}`);
                    return true;
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${range}:`, error.message);
                continue;
            }
        }
        
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: ${userId}`);
        return false;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
        return false;
    }
}

    async connect() {
        try {
            console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...');
            
            const credentials = await this.loadCredentials();
            
            const auth = new google.auth.JWT({
                email: credentials.client_email,
                key: credentials.private_key,
                scopes: ['https://www.googleapis.com/auth/spreadsheets'],
            });

            await auth.authorize();
            this.client = google.sheets({ version: 'v4', auth });
            
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ');
            return this.client;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets:', error.message);
            throw error;
        }
    }

    async loadCredentials() {
        try {
            const credentialsEnv = process.env.GOOGLE_CREDENTIALS;
            
            if (!credentialsEnv) {
                throw new Error('GOOGLE_CREDENTIALS not found in environment variables');
            }

            const trimmedCredentials = credentialsEnv.trim();

            // –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .json)
            if (trimmedCredentials.endsWith('.json')) {
                return await this.loadCredentialsFromFile(trimmedCredentials);
            }

            // –ï—Å–ª–∏ —ç—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞
            try {
                return JSON.parse(trimmedCredentials);
            } catch (parseError) {
                throw new Error('GOOGLE_CREDENTIALS is not valid JSON: ' + parseError.message);
            }
            
        } catch (error) {
            console.error('‚ùå Error loading Google credentials:', error.message);
            throw error;
        }
    }

    async loadCredentialsFromFile(filePath) {
        try {
            const resolvedPath = path.resolve(filePath);
            console.log(`üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ credentials –∏–∑ —Ñ–∞–π–ª–∞: ${resolvedPath}`);
            
            const data = await fs.readFile(resolvedPath, 'utf8');
            const credentials = JSON.parse(data);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!credentials.client_email) {
                throw new Error('Credentials file missing client_email');
            }
            if (!credentials.private_key) {
                throw new Error('Credentials file missing private_key');
            }
            
            console.log('‚úÖ Credentials —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
            return credentials;
            
        } catch (error) {
            console.error('‚ùå Error reading credentials file:', error.message);
            throw new Error('Failed to read credentials file: ' + error.message);
        }
    }

    // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
    async getValues(range) {
        try {
            if (!this.client) {
                await this.connect();
            }

            const result = await this.client.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: range
            });
            return result.data.values || [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã');
        }
    }

    async updateValues(range, values) {
        try {
            if (!this.client) {
                await this.connect();
            }

            await this.client.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: range,
                valueInputOption: 'RAW',
                resource: { values }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    async appendValues(range, values) {
        try {
            if (!this.client) {
                await this.connect();
            }

            await this.client.spreadsheets.values.append({
                spreadsheetId: this.spreadsheetId,
                range: range,
                valueInputOption: 'RAW',
                resource: { values }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–º–µ–Ω–∞–º–∏
    async getAvailableShifts() {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–º–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∏"...');
            
            const rows = await this.getValues('–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∏!A:I');
            
            if (rows.length < 2) {
                console.log('‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
                return [];
            }
            
            const shifts = [];
            
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                
                if (!row || row.length === 0) continue;
                if (row.length < 4 || !row[1] || !row[3]) continue;
                
                try {
                    const shift = {
                        id: (row[0]?.toString() || (i).toString()).trim(),
                        date: (row[1]?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–∞').trim(),
                        time: (row[2]?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ').trim(),
                        department: (row[3]?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω').trim(),
                        requiredPeople: 0,
                        signedUp: [],
                        status: 'active',
                        pendingApproval: [],
                        approved: []
                    };
                    
                    if (row[4] !== undefined && row[4] !== null && row[4] !== '') {
                        shift.requiredPeople = parseInt(row[4].toString().trim());
                        if (isNaN(shift.requiredPeople) || shift.requiredPeople < 0) {
                            shift.requiredPeople = 0;
                        }
                    }
                    
                    if (row[6] !== undefined && row[6] !== null) {
                        const status = row[6].toString().trim().toLowerCase();
                        shift.status = (status === 'active' || status === '–∞–∫—Ç–∏–≤–Ω–æ') ? 'active' : 
                                      (status === 'inactive' || status === '–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ') ? 'inactive' : 
                                      (status === 'completed' || status === '–∑–∞–≤–µ—Ä—à–µ–Ω–æ') ? 'completed' : 'active';
                    }
                    
                    const processUserList = (listString) => {
                        if (!listString) return [];
                        return listString.toString()
                            .split(',')
                            .map(name => name.trim())
                            .filter(name => name.length > 0);
                    };
                    
                    if (row[5]) shift.signedUp = processUserList(row[5]);
                    if (row[7]) shift.pendingApproval = processUserList(row[7]);
                    if (row[8]) shift.approved = processUserList(row[8]);
                    
                    if (shift.status === 'active') {
                        shifts.push(shift);
                    }
                    
                } catch (rowError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + 1}:`, rowError);
                }
            }
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${shifts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω`);
            return shifts;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–º–µ–Ω:', error);
            return [];
        }
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    async checkEmployeeExists(fio) {
        try {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${fio}`);
            
            const tablesToCheck = ['–û—à–∏–±–∫–∏!A:A', '–¢–∞–±–µ–ª—å!A:Z', '–û—Ç–±–æ—Ä!A:A', '–†–∞–∑–º–µ—â–µ–Ω–∏–µ!A:A'];
            
            for (const range of tablesToCheck) {
                try {
                    const rows = await this.getValues(range);
                    const found = rows.some(row => row.some(cell => cell && cell.toString().trim() === fio.trim()));
                    
                    if (found) {
                        console.log(`‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ: ${range.split('!')[0]}`);
                        return true;
                    }
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${range}:`, error.message);
                    continue;
                }
            }
            
            console.log(`‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ: ${fio}`);
            return false;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error.message);
            return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        }
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getErrorCount(fio) {
        try {
            const rows = await this.getValues('–û—à–∏–±–∫–∏!A:C');
            const errors = rows.filter(row => row[0] && row[0].toString().trim() === fio.trim());
            return errors.length;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫:', error);
            return 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    parseDate(dateString) {
        if (!dateString) return new Date(0);
        
        const formats = [
            /(\d{2})\.(\d{2})\.(\d{4})/,
            /(\d{4})-(\d{2})-(\d{2})/,
            /(\d{1,2})\/(\d{1,2})\/(\d{4})/
        ];
        
        for (const format of formats) {
            const match = dateString.match(format);
            if (match) {
                let day, month, year;
                
                if (format === formats[0]) {
                    day = parseInt(match[1]);
                    month = parseInt(match[2]) - 1;
                    year = parseInt(match[3]);
                } else if (format === formats[1]) {
                    year = parseInt(match[1]);
                    month = parseInt(match[2]) - 1;
                    day = parseInt(match[3]);
                } else {
                    month = parseInt(match[1]) - 1;
                    day = parseInt(match[2]);
                    year = parseInt(match[3]);
                }
                
                return new Date(year, month, day);
            }
        }
        
        return new Date(0);
    }

    extractUserName(userString) {
        return userString.split('|')[0];
    }

    extractUserId(userString) {
        const parts = userString.split('|');
        return parts.length > 1 ? parseInt(parts[1]) : null;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async testConnection() {
        try {
            if (!this.client) {
                await this.connect();
            }

            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
            const response = await this.client.spreadsheets.get({
                spreadsheetId: this.spreadsheetId
            });

            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log(`üìä –¢–∞–±–ª–∏—Ü–∞: ${response.data.properties.title}`);
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
            return false;
        }
    }
}

module.exports = GoogleSheetsService;