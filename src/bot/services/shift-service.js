const GoogleSheetsService = require('./google-sheets');

class ShiftService extends GoogleSheetsService {
    constructor() {
        super();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã
    async createShift(shiftData) {
        try {
            console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã:', shiftData);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if (!shiftData.date || !shiftData.time || !shiftData.department || !shiftData.requiredPeople) {
                throw new Error('–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
            }

            if (shiftData.requiredPeople <= 0) {
                throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
            const shifts = await this.getAvailableShifts();
            const newId = shifts.length > 0 ? Math.max(...shifts.map(s => parseInt(s.id))) + 1 : 1;
            
            await this.client.spreadsheets.values.append({
                spreadsheetId: this.spreadsheetId,
                range: '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∏!A:I',
                valueInputOption: 'RAW',
                resource: {
                    values: [[
                        newId,
                        shiftData.date,
                        shiftData.time,
                        shiftData.department,
                        shiftData.requiredPeople,
                        '', // signedUp - –∫–æ–ª–æ–Ω–∫–∞ F
                        'active', // status - –∫–æ–ª–æ–Ω–∫–∞ G
                        '', // pendingApproval - –∫–æ–ª–æ–Ω–∫–∞ H
                        ''  // approved - –∫–æ–ª–æ–Ω–∫–∞ I
                    ]]
                }
            });
            
            console.log(`‚úÖ –°–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: ID ${newId}, ${shiftData.date} ${shiftData.time}, ${shiftData.department}`);
            return newId;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–º–µ–Ω—ã:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–æ ID
    async getShiftById(shiftId) {
        try {
            const shifts = await this.getAvailableShifts();
            const shift = shifts.find(s => s.id.toString() === shiftId.toString());
            
            if (!shift) {
                throw new Error('–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            return shift;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–º–µ–Ω—ã:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã
    async updateShift(shiftId, updateData) {
        try {
            const shifts = await this.getAvailableShifts();
            const shift = shifts.find(s => s.id.toString() === shiftId.toString());
            
            if (!shift) {
                throw new Error('–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
            if (updateData.date !== undefined) shift.date = updateData.date;
            if (updateData.time !== undefined) shift.time = updateData.time;
            if (updateData.department !== undefined) shift.department = updateData.department;
            if (updateData.requiredPeople !== undefined) shift.requiredPeople = updateData.requiredPeople;
            if (updateData.status !== undefined) shift.status = updateData.status;

            await this.updateShiftInSheet(shiftId, {
                date: shift.date,
                time: shift.time,
                department: shift.department,
                requiredPeople: shift.requiredPeople,
                status: shift.status
            });
            
            console.log(`‚úÖ –°–º–µ–Ω–∞ ${shiftId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
            return shift;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
    async updateShiftInSheet(shiftId, updates) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–º–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ getValues
            const shifts = await this.getValues('–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∏!A:I');
            let rowIndex = -1;

            for (let i = 1; i < shifts.length; i++) {
                if (shifts[i][0] && shifts[i][0].toString() === shiftId.toString()) {
                    rowIndex = i + 1; // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –≤ Sheets –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
                    break;
                }
            }

            if (rowIndex === -1) {
                throw new Error(`–°–º–µ–Ω–∞ —Å ID ${shiftId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            const range = `–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∏!A${rowIndex}:I${rowIndex}`;
            const currentRow = shifts[rowIndex - 1];
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (updates.signedUp !== undefined) {
                currentRow[5] = Array.isArray(updates.signedUp) ? updates.signedUp.join(', ') : updates.signedUp;
            }
            
            if (updates.pendingApproval !== undefined) {
                currentRow[7] = Array.isArray(updates.pendingApproval) ? updates.pendingApproval.join(', ') : updates.pendingApproval;
            }
            
            if (updates.approved !== undefined) {
                currentRow[8] = Array.isArray(updates.approved) ? updates.approved.join(', ') : updates.approved;
            }
            
            if (updates.status !== undefined) {
                currentRow[6] = updates.status;
            }

            if (updates.date !== undefined) {
                currentRow[1] = updates.date;
            }

            if (updates.time !== undefined) {
                currentRow[2] = updates.time;
            }

            if (updates.department !== undefined) {
                currentRow[3] = updates.department;
            }

            if (updates.requiredPeople !== undefined) {
                currentRow[4] = updates.requiredPeople;
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ updateValues
            await this.updateValues(range, [currentRow]);
            
            console.log(`‚úÖ –°–º–µ–Ω–∞ ${shiftId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ`);
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ:', error);
            throw error;
        }
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã
    async updateShiftStatus(shiftId, status) {
        try {
            const shift = await this.getShiftById(shiftId);
            
            if (!shift) {
                throw new Error('–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            await this.updateShiftInSheet(shiftId, { status });
            
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã ${shiftId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${status}`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã:', error);
            throw error;
        }
    }

    // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–º–µ–Ω—ã
    async deactivateShift(shiftId) {
        try {
            return await this.updateShiftStatus(shiftId, 'inactive');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–º–µ–Ω—ã:', error);
            throw error;
        }
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
    async completeShift(shiftId) {
        try {
            return await this.updateShiftStatus(shiftId, 'completed');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–º–µ–Ω (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
    async getAllShifts() {
        try {
            const result = await this.client.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∏!A:I'
            });
            
            const rows = result.data.values || [];
            if (rows.length < 2) return [];
            
            const shifts = [];
            
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                if (!row || row.length === 0) continue;
                
                const shift = {
                    id: row[0]?.toString() || i.toString(),
                    date: row[1] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                    time: row[2] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    department: row[3] || '–ù–µ —É–∫–∞–∑–∞–Ω',
                    requiredPeople: parseInt(row[4] || 0),
                    signedUp: [],
                    status: row[6] || 'active',
                    pendingApproval: [],
                    approved: []
                };
                
                if (row[5]) shift.signedUp = row[5].split(',').filter(Boolean);
                if (row[7]) shift.pendingApproval = row[7].split(',').filter(Boolean);
                if (row[8]) shift.approved = row[8].split(',').filter(Boolean);
                
                shifts.push(shift);
            }
            
            return shifts;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–º–µ–Ω:', error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–º–µ–Ω –ø–æ —Å—Ç–∞—Ç—É—Å—É
    async getShiftsByStatus(status) {
        try {
            const allShifts = await this.getAllShifts();
            return allShifts.filter(shift => shift.status === status);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–º–µ–Ω –ø–æ —Å—Ç–∞—Ç—É—Å—É:', error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω
    async getActiveShifts() {
        return await this.getShiftsByStatus('active');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω
    async getCompletedShifts() {
        return await this.getShiftsByStatus('completed');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω
    async getInactiveShifts() {
        return await this.getShiftsByStatus('inactive');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ
    async getShiftDetails(shiftId) {
        try {
            const shifts = await this.getAllShifts();
            const shift = shifts.find(s => s.id.toString() === shiftId.toString());
            
            if (!shift) {
                throw new Error('–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ
            return {
                ...shift,
                availableSlots: shift.requiredPeople - (shift.approved.length + shift.pendingApproval.length),
                fulfillmentPercentage: shift.requiredPeople > 0 
                    ? Math.round((shift.approved.length / shift.requiredPeople) * 100)
                    : 0,
                isFull: (shift.approved.length + shift.pendingApproval.length) >= shift.requiredPeople,
                canAcceptMore: (shift.approved.length + shift.pendingApproval.length) < shift.requiredPeople
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—è:', error);
            throw error;
        }
    }

    // –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–º–µ–Ω—É
    async signUpForShift(userId, userName, shiftId) {
        try {
            console.log(`üìù –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} –Ω–∞ —Å–º–µ–Ω—É ${shiftId}`);
            
            const shift = await this.getShiftById(shiftId);
            
            if (!shift) {
                throw new Error('–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            if (shift.status !== 'active') {
                throw new Error('–°–º–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏');
            }
            
            const userWithId = `${userName}|${userId}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–ª –ª–∏ —É–∂–µ –∑–∞—è–≤–∫—É
            if (shift.pendingApproval.some(item => item.startsWith(userName + '|')) || 
                shift.approved.some(item => item.startsWith(userName + '|'))) {
                throw new Error('–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç—É —Å–º–µ–Ω—É');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
            if ((shift.approved.length + shift.pendingApproval.length) >= shift.requiredPeople) {
                throw new Error('–ù–∞ —ç—Ç—É —Å–º–µ–Ω—É —É–∂–µ –Ω–∞–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–¥–µ–π');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            const updatedPending = [...shift.pendingApproval, userWithId];
            await this.updateShiftInSheet(shiftId, { pendingApproval: updatedPending });
            
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ pendingApproval —Å–º–µ–Ω—ã ${shiftId}`);
            return {
                success: true,
                shift: { ...shift, pendingApproval: updatedPending },
                availableSlots: shift.requiredPeople - (shift.approved.length + updatedPending.length)
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–º–µ–Ω—É:', error);
            throw error;
        }
    }

    // –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–º–µ–Ω—É
    async cancelSignUp(userName, shiftId) {
        try {
            console.log(`‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} —Å —Å–º–µ–Ω—ã ${shiftId}`);
            
            const shift = await this.getShiftById(shiftId);
            
            if (!shift) {
                throw new Error('–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
            const updatedSignedUp = shift.signedUp.filter(item => !item.startsWith(userName + '|'));
            const updatedPending = shift.pendingApproval.filter(item => !item.startsWith(userName + '|'));
            const updatedApproved = shift.approved.filter(item => !item.startsWith(userName + '|'));
            
            await this.updateShiftInSheet(shiftId, {
                signedUp: updatedSignedUp,
                pendingApproval: updatedPending,
                approved: updatedApproved
            });
            
            console.log(`‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å —Å–º–µ–Ω—ã ${shiftId}`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserShifts(userName) {
        try {
            const allShifts = await this.getAllShifts();
            const userShifts = [];
            
            for (const shift of allShifts) {
                const userInSigned = shift.signedUp.some(item => this.extractUserName(item) === userName);
                const userInPending = shift.pendingApproval.some(item => this.extractUserName(item) === userName);
                const userInApproved = shift.approved.some(item => this.extractUserName(item) === userName);
                
                if (userInSigned || userInPending || userInApproved) {
                    userShifts.push({
                        ...shift,
                        userStatus: userInApproved ? 'approved' : 
                                  userInPending ? 'pending' : 'signed'
                    });
                }
            }
            
            return userShifts;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return [];
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–º–µ–Ω—É
    async isUserSignedUp(userName, shiftId) {
        try {
            const shift = await this.getShiftById(shiftId);
            
            if (!shift) {
                return false;
            }
            
            return shift.signedUp.some(item => this.extractUserName(item) === userName) ||
                   shift.pendingApproval.some(item => this.extractUserName(item) === userName) ||
                   shift.approved.some(item => this.extractUserName(item) === userName);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–º–µ–Ω–∞–º
    async getShiftsStats() {
        try {
            const allShifts = await this.getAllShifts();
            const activeShifts = allShifts.filter(s => s.status === 'active');
            const completedShifts = allShifts.filter(s => s.status === 'completed');
            
            const stats = {
                total: allShifts.length,
                active: activeShifts.length,
                completed: completedShifts.length,
                inactive: allShifts.length - activeShifts.length - completedShifts.length,
                totalApplications: allShifts.reduce((acc, shift) => 
                    acc + shift.pendingApproval.length + shift.approved.length, 0),
                pendingApplications: allShifts.reduce((acc, shift) => 
                    acc + shift.pendingApproval.length, 0),
                approvedApplications: allShifts.reduce((acc, shift) => 
                    acc + shift.approved.length, 0),
                averageFulfillment: 0
            };
            
            // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            const fulfilledShifts = allShifts.filter(shift => shift.requiredPeople > 0);
            if (fulfilledShifts.length > 0) {
                const totalFulfillment = fulfilledShifts.reduce((acc, shift) => 
                    acc + (shift.approved.length / shift.requiredPeople) * 100, 0);
                stats.averageFulfillment = Math.round(totalFulfillment / fulfilledShifts.length);
            }
            
            return stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω:', error);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ —Å–º–µ–Ω –ø–æ –¥–∞—Ç–µ –∏ –æ—Ç–¥–µ–ª—É
    async findShiftsByCriteria(criteria) {
        try {
            const allShifts = await this.getAllShifts();
            
            return allShifts.filter(shift => {
                let matches = true;
                
                if (criteria.date && shift.date !== criteria.date) {
                    matches = false;
                }
                
                if (criteria.department && shift.department !== criteria.department) {
                    matches = false;
                }
                
                if (criteria.status && shift.status !== criteria.status) {
                    matches = false;
                }
                
                if (criteria.minSlots !== undefined) {
                    const availableSlots = shift.requiredPeople - (shift.approved.length + shift.pendingApproval.length);
                    if (availableSlots < criteria.minSlots) {
                        matches = false;
                    }
                }
                
                return matches;
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–º–µ–Ω:', error);
            return [];
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã
    validateShiftData(shiftData) {
        const errors = [];
        
        if (!shiftData.date || !/^\d{2}\.\d{2}\.\d{4}$/.test(shiftData.date)) {
            errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
        }
        
        if (!shiftData.time || !/^\d{2}:\d{2}-\d{2}:\d{2}$/.test(shiftData.time)) {
            errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú');
        }
        
        if (!shiftData.department || shiftData.department.trim().length < 2) {
            errors.push('–û—Ç–¥–µ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        
        if (!shiftData.requiredPeople || shiftData.requiredPeople <= 0) {
            errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
        }
        
        return errors;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatShiftForDisplay(shift) {
        return {
            id: shift.id,
            date: shift.date,
            time: shift.time,
            department: shift.department,
            requiredPeople: shift.requiredPeople,
            approvedCount: shift.approved.length,
            pendingCount: shift.pendingApproval.length,
            availableSlots: shift.requiredPeople - (shift.approved.length + shift.pendingApproval.length),
            status: shift.status,
            isFull: (shift.approved.length + shift.pendingApproval.length) >= shift.requiredPeople,
            fulfillmentPercentage: shift.requiredPeople > 0 
                ? Math.round((shift.approved.length / shift.requiredPeople) * 100)
                : 0
        };
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    extractUserName(userString) {
        return userString.split('|')[0];
    }

    extractUserId(userString) {
        const parts = userString.split('|');
        return parts.length > 1 ? parseInt(parts[1]) : null;
    }
}

module.exports = ShiftService;