const GoogleSheetsService = require('./google-sheets');

class UserService extends GoogleSheetsService {
    constructor() {
        super();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async saveUser(fio, userId) {
        try {
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${fio} (ID: ${userId})`);
            
            const result = await this.client.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:B'
            });
            
            const rows = result.data.values || [];
            let rowIndex = -1;
            
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (let i = 0; i < rows.length; i++) {
                if (rows[i][0] && rows[i][0].trim() === fio.trim()) {
                    rowIndex = i + 1;
                    break;
                }
            }
            
            if (rowIndex === -1) {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await this.client.spreadsheets.values.append({
                    spreadsheetId: this.spreadsheetId,
                    range: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:B',
                    valueInputOption: 'RAW',
                    resource: {
                        values: [[fio, userId]]
                    }
                });
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${fio}`);
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await this.client.spreadsheets.values.update({
                    spreadsheetId: this.spreadsheetId,
                    range: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!B${rowIndex}`,
                    valueInputOption: 'RAW',
                    resource: {
                        values: [[userId]]
                    }
                });
                console.log(`‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω: ${fio}`);
            }
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return false;
        }
    }

    // –ü–æ–∏—Å–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û
    async findUserIdByFio(fio) {
        try {
            console.log(`üîç –ü–æ–∏—Å–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û: ${fio}`);
            
            const result = await this.client.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:B'
            });
            
            const rows = result.data.values || [];
            
            for (let i = 1; i < rows.length; i++) {
                if (rows[i][0] && rows[i][0].trim() === fio.trim() && rows[i][1]) {
                    const userId = parseInt(rows[i][1]);
                    console.log(`‚úÖ ID –Ω–∞–π–¥–µ–Ω: ${fio} ‚Üí ${userId}`);
                    return userId;
                }
            }
            
            console.log(`‚ö†Ô∏è ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: ${fio}`);
            return null;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ –§–ò–û –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async findFioByUserId(userId) {
        try {
            console.log(`üîç –ü–æ–∏—Å–∫ –§–ò–û –ø–æ ID: ${userId}`);
            
            const result = await this.client.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:B'
            });
            
            const rows = result.data.values || [];
            
            for (let i = 1; i < rows.length; i++) {
                if (rows[i][1] && parseInt(rows[i][1]) === userId && rows[i][0]) {
                    const fio = rows[i][0].trim();
                    console.log(`‚úÖ –§–ò–û –Ω–∞–π–¥–µ–Ω–æ: ${userId} ‚Üí ${fio}`);
                    return fio;
                }
            }
            
            console.log(`‚ö†Ô∏è –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ID: ${userId}`);
            return null;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –§–ò–û:', error);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getAllUsers() {
        try {
            console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            
            const result = await this.client.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:B'
            });
            
            const rows = result.data.values || [];
            const users = [];
            
            for (let i = 1; i < rows.length; i++) {
                if (rows[i][0] && rows[i][1]) {
                    users.push({
                        fio: rows[i][0].trim(),
                        userId: parseInt(rows[i][1]),
                        rowIndex: i + 1
                    });
                }
            }
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
            return users;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async deleteUser(fio) {
        try {
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${fio}`);
            
            const result = await this.client.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:B'
            });
            
            const rows = result.data.values || [];
            const updatedRows = rows.filter((row, index) => {
                if (index === 0) return true; // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                return !(row[0] && row[0].trim() === fio.trim());
            });
            
            await this.client.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:B',
                valueInputOption: 'RAW',
                resource: {
                    values: updatedRows
                }
            });
            
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: ${fio}`);
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
    async checkEmployeeExists(fio) {
        try {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: ${fio}`);
            
            const tablesToCheck = ['–û—à–∏–±–∫–∏!A:A', '–¢–∞–±–µ–ª—å!A:Z', '–û—Ç–±–æ—Ä!A:A', '–†–∞–∑–º–µ—â–µ–Ω–∏–µ!A:A'];
            
            for (const range of tablesToCheck) {
                try {
                    const result = await this.client.spreadsheets.values.get({
                        spreadsheetId: this.spreadsheetId,
                        range: range
                    });
                    
                    const rows = result.data.values || [];
                    const found = rows.some(row => row.some(cell => cell && cell.toString().trim() === fio.trim()));
                    
                    if (found) {
                        console.log(`‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ: ${range.split('!')[0]}`);
                        return true;
                    }
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${range}:`, error.message);
                    continue;
                }
            }
            
            console.log(`‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ: ${fio}`);
            return false;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error.message);
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    async getErrorCount(fio) {
        try {
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ –¥–ª—è: ${fio}`);
            
            const rows = await this.getValues('–û—à–∏–±–∫–∏!A:C');
            const errors = rows.filter(row => row[0] && row[0].trim() === fio.trim());
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${errors.length} –¥–ª—è ${fio}`);
            return errors.length;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–µ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    async getShiftData(fio) {
        try {
            console.log(`üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–µ–ª—è –¥–ª—è: ${fio}`);
            
            const rows = await this.getValues('–¢–∞–±–µ–ª—å!A:Z');
            
            if (!rows || rows.length < 2) {
                throw new Error('–î–∞–Ω–Ω—ã–µ —Ç–∞–±–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                for (let j = 0; j < Math.min(row.length, 10); j++) {
                    if (row[j] && row[j].toString().trim() === fio.trim()) {
                        const data = {
                            plannedShifts: parseInt(row[0] || 0),
                            extraShifts: parseInt(row[1] || 0),
                            absences: parseInt(row[2] || 0),
                            reinforcementShifts: parseInt(row[3] || 0)
                        };
                        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–∞–±–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è: ${fio}`, data);
                        return data;
                    }
                }
            }
            
            throw new Error('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–µ–ª–µ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–µ–ª—è:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–µ–ª—è');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ—Ç–±–æ—Ä)
    async getSelectionData(fio, year, month) {
        try {
            console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–±–æ—Ä–∞ –¥–ª—è: ${fio}, ${month}.${year}`);
            
            const rows = await this.getValues('–û—Ç–±–æ—Ä!A:D');
            
            if (!rows || rows.length < 2) {
                console.log('‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç–±–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã–µ');
                return {};
            }
            
            const data = {};
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–Ω–∏
            for (let day = 1; day <= 31; day++) {
                data[`rm_day_${day}`] = 0;
                data[`os_day_${day}`] = 0;
            }
            
            const filteredData = rows.filter(row => {
                if (row.length < 4) return false;
                
                try {
                    const rowDate = new Date(row[1]);
                    return row[0] && row[0].trim() === fio.trim() && 
                           rowDate.getFullYear() === year && 
                           rowDate.getMonth() + 1 === month;
                } catch (error) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã:', error);
                    return false;
                }
            });
            
            filteredData.forEach(row => {
                try {
                    const day = new Date(row[1]).getDate();
                    const os = parseFloat(row[2]) || 0;
                    const rm = parseFloat(row[3]) || 0;
                    
                    data[`rm_day_${day}`] = rm;
                    data[`os_day_${day}`] = os;
                } catch (error) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–±–æ—Ä–∞:', error);
                }
            });
            
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–±–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è: ${fio}`);
            return data;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–±–æ—Ä–∞:', error.message);
            return {};
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ)
    async getPlacementData(fio, year, month) {
        try {
            console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–ª—è: ${fio}, ${month}.${year}`);
            
            const rows = await this.getValues('–†–∞–∑–º–µ—â–µ–Ω–∏–µ!A:D');
            
            if (!rows) {
                throw new Error('–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
            
            const data = {};
            
            for (let day = 1; day <= 31; day++) {
                data[`rm_day_${day}`] = 0;
                data[`os_day_${day}`] = 0;
            }
            
            const filteredData = rows.filter(row => {
                if (row.length < 4) return false;
                
                const rowDate = new Date(row[1]);
                return row[0] && row[0].trim() === fio.trim() && 
                       rowDate.getFullYear() === year && 
                       rowDate.getMonth() + 1 === month;
            });
            
            filteredData.forEach(row => {
                const day = new Date(row[1]).getDate();
                const os = parseFloat(row[2]) || 0;
                const rm = parseFloat(row[3]) || 0;
                
                data[`rm_day_${day}`] = rm;
                data[`os_day_${day}`] = os;
            });
            
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è: ${fio}`);
            return data;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:', error.message);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    async getProductivityData(fio, year, month) {
        try {
            console.log(`üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è: ${fio}, ${month}.${year}`);
            
            const selectionData = await this.getSelectionData(fio, year, month);
            const placementData = await this.getPlacementData(fio, year, month);

            let totalRmSelection = 0;
            let totalOsSelection = 0;
            let totalRmPlacement = 0;
            let totalOsPlacement = 0;
            let daysWithData = 0;

            for (let day = 1; day <= 31; day++) {
                const selRm = selectionData ? (selectionData[`rm_day_${day}`] || 0) : 0;
                const selOs = selectionData ? (selectionData[`os_day_${day}`] || 0) : 0;
                const plRm = placementData ? (placementData[`rm_day_${day}`] || 0) : 0;
                const plOs = placementData ? (placementData[`os_day_${day}`] || 0) : 0;
                
                if (selRm > 0 || selOs > 0 || plRm > 0 || plOs > 0) {
                    daysWithData++;
                    totalRmSelection += selRm;
                    totalOsSelection += selOs;
                    totalRmPlacement += plRm;
                    totalOsPlacement += plOs;
                }
            }

            const result = {
                selectionData,
                placementData,
                totalRmSelection,
                totalOsSelection,
                totalRmPlacement,
                totalOsPlacement,
                daysWithData,
                totalSelection: totalRmSelection + totalOsSelection,
                totalPlacement: totalRmPlacement + totalOsPlacement,
                avgSelectionPerDay: daysWithData > 0 ? Math.round((totalRmSelection + totalOsSelection) / daysWithData) : 0,
                avgPlacementPerDay: daysWithData > 0 ? Math.round((totalRmPlacement + totalOsPlacement) / daysWithData) : 0
            };

            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è: ${fio}`, {
                daysWithData: result.daysWithData,
                totalSelection: result.totalSelection,
                totalPlacement: result.totalPlacement
            });
            
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
            return {
                selectionData: {},
                placementData: {},
                totalRmSelection: 0,
                totalOsSelection: 0,
                totalRmPlacement: 0,
                totalOsPlacement: 0,
                daysWithData: 0,
                totalSelection: 0,
                totalPlacement: 0,
                avgSelectionPerDay: 0,
                avgPlacementPerDay: 0
            };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É
    async getUserApplications(userName) {
        try {
            console.log(`üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}`);
            
            const shifts = await this.getAvailableShifts();
            const userApplications = shifts.filter(shift => 
                shift.signedUp.some(item => this.extractUserName(item) === userName) || 
                shift.pendingApproval.some(item => this.extractUserName(item) === userName) || 
                shift.approved.some(item => this.extractUserName(item) === userName)
            );
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${userApplications.length} –¥–ª—è ${userName}`);
            return userApplications;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserStats(fio) {
        try {
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${fio}`);
            
            const [errorCount, shiftData, applications] = await Promise.all([
                this.getErrorCount(fio),
                this.getShiftData(fio),
                this.getUserApplications(fio)
            ]);
            
            const stats = {
                errorCount,
                shiftData,
                applicationsCount: applications.length,
                approvedApplications: applications.filter(app => 
                    app.approved.some(item => this.extractUserName(item) === fio)
                ).length,
                pendingApplications: applications.filter(app => 
                    app.pendingApproval.some(item => this.extractUserName(item) === fio)
                ).length
            };
            
            console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è: ${fio}`, stats);
            return stats;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return {
                errorCount: 0,
                shiftData: {},
                applicationsCount: 0,
                approvedApplications: 0,
                pendingApplications: 0
            };
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    validateFIO(fio) {
        const parts = fio.trim().replace(/\s+/g, ' ').split(' ');
        const isValid = parts.length === 3 && parts.every(part => /^[A-Za-z–ê-–Ø–∞-—è–Å—ë\-]+$/.test(part));
        
        if (!isValid) {
            console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –§–ò–û: ${fio}`);
        }
        
        return isValid;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û
    formatFIO(fio) {
        if (!fio) return '';
        
        const parts = fio.trim().split(' ');
        if (parts.length === 3) {
            return `${parts[0]} ${parts[1][0]}.${parts[2][0]}.`;
        }
        if (parts.length === 2) {
            return `${parts[0]} ${parts[1][0]}.`;
        }
        return fio;
    }

    // –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –§–ò–û
    truncateName(fullName, maxLength = 15) {
        if (!fullName) return '???';
        
        const parts = fullName.split(' ');
        if (parts.length >= 3) {
            return `${parts[0]} ${parts[1][0]}.${parts[2][0]}.`;
        }
        if (parts.length === 2) {
            return `${parts[0]} ${parts[1][0]}.`;
        }
        return fullName.length > maxLength ? fullName.slice(0, maxLength - 1) + '‚Ä¶' : fullName;
    }
}

module.exports = UserService;