const { Telegraf } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const { setupMainHandlers } = require('./handlers/main');
const { setupAdminHandlers } = require('./handlers/admin');
const { setupShiftHandlers } = require('./handlers/shifts');
const { setupApplicationHandlers } = require('./handlers/applications');
const { setupProductivityHandlers } = require('./handlers/productivity');

class TelegramBot {
    constructor(token) {
        this.bot = new Telegraf(token);
        this.setupSession();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
    setupSession() {
        this.bot.use((new LocalSession({ 
            database: 'sessions.json',
            storage: LocalSession.storageFileAsync,
            property: 'session',
            state: {
                userFio: null,
                shortFio: null,
                currentData: null,
                creatingShift: false,
                shiftData: {},
                adminAction: null,
                availableShifts: [],
                pendingApplications: []
            }
        })).middleware());
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupHandlers() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setupMainHandlers(this.bot);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        setupAdminHandlers(this.bot);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–º–µ–Ω–∞–º–∏
        setupShiftHandlers(this.bot);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É
        setupApplicationHandlers(this.bot);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        setupProductivityHandlers(this.bot);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        this.setupErrorHandling();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    setupErrorHandling() {
        this.bot.catch((error, ctx) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
            
            try {
                ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
            } catch (replyError) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–µ–±—Ö—É–∫–∞
        this.bot.use(async (ctx, next) => {
            try {
                await next();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ middleware:', error);
                throw error;
            }
        });
    }

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    async launch() {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
            
            this.setupHandlers();
            
            await this.bot.launch({
                dropPendingUpdates: true,
                polling: {
                    timeout: 10,
                    limit: 100,
                    allowedUpdates: ['message', 'callback_query']
                }
            });
            
            console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
            console.log('ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
            throw error;
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    stop(signal) {
        try {
            this.bot.stop(signal);
            console.log(`üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å —Å–∏–≥–Ω–∞–ª–æ–º: ${signal}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ middleware –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    webhookCallback() {
        return this.bot.webhookCallback('/telegram-webhook');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
    getBotInstance() {
        return this.bot;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    async getBotInfo() {
        try {
            return await this.bot.telegram.getMe();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
            return null;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    async healthCheck() {
        try {
            const botInfo = await this.getBotInfo();
            return {
                status: 'healthy',
                botUsername: botInfo?.username,
                timestamp: new Date().toISOString()
            };
        } catch (error) {
            return {
                status: 'unhealthy',
                error: error.message,
                timestamp: new Date().toISOString()
            };
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async sendMessage(userId, message, options = {}) {
        try {
            await this.bot.telegram.sendMessage(userId, message, {
                parse_mode: 'Markdown',
                ...options
            });
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
            return false;
        }
    }

    // –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    async broadcastMessage(userIds, message, options = {}) {
        const results = {
            successful: 0,
            failed: 0,
            errors: []
        };

        for (const userId of userIds) {
            try {
                const success = await this.sendMessage(userId, message, options);
                if (success) {
                    results.successful++;
                } else {
                    results.failed++;
                    results.errors.push({ userId, error: 'Failed to send message' });
                }
            } catch (error) {
                results.failed++;
                results.errors.push({ userId, error: error.message });
            }
        }

        return results;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    setupGracefulShutdown() {
        const signals = ['SIGINT', 'SIGTERM', 'SIGQUIT'];
        
        signals.forEach(signal => {
            process.once(signal, async () => {
                console.log(`\n${signal} –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...`);
                
                try {
                    await this.stop(signal);
                    console.log('‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω');
                    process.exit(0);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown:', error);
                    process.exit(1);
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        process.on('unhandledRejection', (reason, promise) => {
            console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', reason);
        });

        process.on('uncaughtException', (error) => {
            console.error('‚ùå –ù–µ–ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
            process.exit(1);
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è middleware (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
    use(middleware) {
        this.bot.use(middleware);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    command(command, handler) {
        this.bot.command(command, handler);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    action(action, handler) {
        this.bot.action(action, handler);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    on(event, handler) {
        this.bot.on(event, handler);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
    async getStats() {
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            return {
                uptime: process.uptime(),
                memoryUsage: process.memoryUsage(),
                timestamp: new Date().toISOString()
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }
}

module.exports = TelegramBot;