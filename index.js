require('dotenv').config();
const express = require('express');
const TelegramBot = require('./src/bot/bot');
const logger = require('./src/utils/logger');
const { getYandexLockbox } = require('./src/utils/yandex-lockbox');

// –í index.js –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 4 –¥–æ–±–∞–≤—å—Ç–µ:
const GoogleSheetsService = require('./src/bot/services/google-sheets');
const UserService = require('./src/bot/services/user-service');
const ShiftService = require('./src/bot/services/shift-service');

class TelegramBotApp {
    constructor() {
        this.app = express();
        this.bot = null;
        this.sheetsService = null; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
        this.userService = null;   // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ  
        this.shiftService = null;  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
        this.port = process.env.PORT || 3000;
        this.isProduction = process.env.NODE_ENV === 'production';
        this.setupExpress();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setupExpress() {
        this.app.use(express.json({ limit: '10mb' }));
        this.app.use(express.urlencoded({ extended: true }));
        
        // Health check endpoints
        this.setupHealthEndpoints();
        
        // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        this.app.use((req, res, next) => {
            logger.http(req, res, Date.now());
            next();
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ health check —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    setupHealthEndpoints() {
        // –û—Å–Ω–æ–≤–Ω–æ–π health check
        this.app.get('/', (req, res) => {
            res.json({
                status: 'OK',
                service: 'Telegram Statistics Bot',
                version: '1.0.0',
                timestamp: new Date().toISOString(),
                environment: process.env.NODE_ENV || 'development'
            });
        });

        // –î–µ—Ç–∞–ª—å–Ω—ã–π health check
        this.app.get('/health', async (req, res) => {
            try {
                const healthInfo = {
                    status: 'OK',
                    bot: this.bot ? 'running' : 'not_started',
                    timestamp: new Date().toISOString(),
                    uptime: process.uptime(),
                    memory: process.memoryUsage(),
                    environment: process.env.NODE_ENV
                };

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Yandex Lockbox
                try {
                    const lockboxHealth = await getYandexLockbox().healthCheck();
                    healthInfo.lockbox = lockboxHealth;
                } catch (lockboxError) {
                    healthInfo.lockbox = {
                        status: 'ERROR',
                        error: lockboxError.message
                    };
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
                if (this.bot) {
                    try {
                        const botHealth = await this.bot.healthCheck();
                        healthInfo.botDetails = botHealth;
                    } catch (botError) {
                        healthInfo.botDetails = {
                            status: 'ERROR',
                            error: botError.message
                        };
                    }
                }

                res.status(200).json(healthInfo);
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ health check:', error);
                res.status(500).json({
                    status: 'ERROR',
                    error: error.message,
                    timestamp: new Date().toISOString()
                });
            }
        });

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.app.get('/stats', async (req, res) => {
            try {
                const stats = {
                    timestamp: new Date().toISOString(),
                    uptime: process.uptime(),
                    memory: process.memoryUsage(),
                    environment: process.env.NODE_ENV,
                    nodeVersion: process.version
                };

                if (this.bot) {
                    Object.assign(stats, await this.bot.getStats());
                }

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Lockbox
                try {
                    const lockboxStats = getYandexLockbox().getStats();
                    stats.lockbox = lockboxStats;
                } catch (lockboxError) {
                    stats.lockbox = { error: lockboxError.message };
                }

                res.json(stats);
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                res.status(500).json({ error: error.message });
            }
        });

        // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞
        this.app.post('/restart', async (req, res) => {
            if (!this.isProduction) {
                try {
                    await this.restartBot();
                    res.json({ status: 'restarting', timestamp: new Date().toISOString() });
                } catch (error) {
                    res.status(500).json({ error: error.message });
                }
            } else {
                res.status(403).json({ error: 'Restart not allowed in production' });
            }
        });

        // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
        this.app.get('/logs', async (req, res) => {
            try {
                const format = req.query.format || 'text';
                const logs = logger.exportLogs(format);
                
                if (format === 'json') {
                    res.setHeader('Content-Type', 'application/json');
                } else {
                    res.setHeader('Content-Type', 'text/plain');
                }
                
                res.send(logs);
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    // index.js - –≤ –º–µ—Ç–æ–¥–µ initializeBot()
    async initializeBot() {
        try {
            logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
    
            const botToken = await this.getBotToken();
            if (!botToken) {
                throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
    
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            this.sheetsService = new GoogleSheetsService();
            await this.sheetsService.connect();
            
            this.userService = new UserService(this.sheetsService);
            this.shiftService = new ShiftService(this.sheetsService);
    
            // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            this.bot = new TelegramBot(botToken);
            
            // –ü–ï–†–ï–î–ê–ï–ú –°–ï–†–í–ò–°–´ –í –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
            const { setupMainHandlers } = require('./src/bot/handlers/main');
            const { setupApplicationHandlers } = require('./src/bot/handlers/applications');
            const { setupAdminHandlers } = require('./src/bot/handlers/admin');
            
            // –ü–ï–†–ï–î–ê–ï–ú this.bot.bot (—ç–∫–∑–µ–º–ø–ª—è—Ä Telegraf), –∞ –Ω–µ this.bot (–≤–∞—à—É –æ–±–µ—Ä—Ç–∫—É)
            setupMainHandlers(this.bot.bot, this.userService);
            setupApplicationHandlers(this.bot.bot, this.shiftService, this.userService);
            setupAdminHandlers(this.bot.bot, this.userService, this.shiftService);
            
            logger.info('‚úÖ –ë–æ—Ç –∏ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            return true;
    
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    async getBotToken() {
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Yandex Lockbox
            const lockbox = getYandexLockbox();
            const botToken = await lockbox.getSecret('BOT_TOKEN');
            
            if (botToken) {
                logger.info('‚úÖ BOT_TOKEN –ø–æ–ª—É—á–µ–Ω –∏–∑ Yandex Lockbox');
                return botToken;
            }

            // Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if (process.env.BOT_TOKEN) {
                logger.info('‚úÖ BOT_TOKEN –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
                return process.env.BOT_TOKEN;
            }

            throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ');

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BOT_TOKEN:', error);
            
            // Final fallback - –≤–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            if (process.env.BOT_TOKEN) {
                logger.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è BOT_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (fallback)');
                return process.env.BOT_TOKEN;
            }

            throw error;
        }
    }

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    async startPolling() {
        try {
            await this.bot.launch();
            logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
            this.setupGracefulShutdown();
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling:', error);
            throw error;
        }
    }

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook
    async startWebhook() {
        try {
            const domain = process.env.RENDER_EXTERNAL_URL || process.env.DOMAIN;
            
            if (!domain) {
                throw new Error('DOMAIN –∏–ª–∏ RENDER_EXTERNAL_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è webhook —Ä–µ–∂–∏–º–∞');
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            await this.bot.telegram.setWebhook(`${domain}/telegram-webhook`);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
            this.app.use(this.bot.webhookCallback('/telegram-webhook'));
            
            logger.info(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${domain}/telegram-webhook`);
            logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
            this.setupGracefulShutdown();
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook:', error);
            throw error;
        }
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    async startServer() {
        return new Promise((resolve, reject) => {
            this.server = this.app.listen(this.port, '0.0.0.0', () => {
                logger.info(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
                logger.info(`üìç Health check –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ http://localhost:${this.port}/health`);
                resolve();
            });

            this.server.on('error', (error) => {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
                reject(error);
            });
        });
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async start() {
        try {
            logger.info('üéØ –ó–∞–ø—É—Å–∫ Telegram Bot Application...');
            logger.info(`üè≠ –†–µ–∂–∏–º: ${this.isProduction ? 'production' : 'development'}`);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
            await this.initializeBot();

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            await this.startServer();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∂–∏–º–µ
            await this.startPolling();

            logger.info('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!');
            this.logStartupInfo();

        } catch (error) {
            logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            process.exit(1);
        }
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
    logStartupInfo() {
        logger.info('\n' + '='.repeat(50));
        logger.info('üöÄ TELEGRAM BOT APPLICATION STARTED');
        logger.info('='.repeat(50));
        logger.info(`üìç Port: ${this.port}`);
        logger.info(`üè≠ Environment: ${process.env.NODE_ENV || 'development'}`);
        logger.info(`ü§ñ Bot mode: ${this.isProduction ? 'webhook' : 'polling'}`);
        logger.info(`üìä Log level: ${logger.getLevel()}`);
        logger.info('='.repeat(50) + '\n');
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async stop(signal = 'SIGTERM') {
        logger.info(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (${signal})...`);
        
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            if (this.bot) {
                this.bot.stop(signal);
            }

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            if (this.server) {
                await new Promise((resolve) => {
                    this.server.close(() => {
                        logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                        resolve();
                    });
                });
            }

            logger.info('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞
    async restartBot() {
        logger.info('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...');
        
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–æ—Ç
            if (this.bot) {
                this.bot.stop('SIGUSR2');
            }
    
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
            await this.initializeBot();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∂–∏–º–µ
            if (this.isProduction) {
                await this.startWebhook();
            } else {
                await this.startPolling();
            }
    
            logger.info('‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω');
            return true;
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞:', error);
            throw error;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
    setupGracefulShutdown() {
        const signals = ['SIGINT', 'SIGTERM', 'SIGQUIT'];
        
        signals.forEach(signal => {
            process.on(signal, async () => {
                logger.info(`\n${signal} –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...`);
                
                try {
                    await this.stop(signal);
                    process.exit(0);
                } catch (error) {
                    logger.error('‚ùå –û—à–∏–±–∫–∞ graceful shutdown:', error);
                    process.exit(1);
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        process.on('unhandledRejection', (reason, promise) => {
            logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', reason);
        });

        process.on('uncaughtException', (error) => {
            logger.error('‚ùå –ù–µ–ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
            process.exit(1);
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async getAppStats() {
        const stats = {
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            timestamp: new Date().toISOString(),
            environment: process.env.NODE_ENV
        };

        if (this.bot) {
            Object.assign(stats, await this.bot.getStats());
        }

        return stats;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function main() {
    const app = new TelegramBotApp();
    
    try {
        await app.start();
    } catch (error) {
        console.error('üí• Failed to start application:', error);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function handleCliArgs() {
    const args = process.argv.slice(2);
    
    if (args.includes('--help') || args.includes('-h')) {
        console.log(`
üöÄ Telegram Bot Application

Usage:
  node index.js [options]

Options:
  --help, -h      Show this help
  --version, -v   Show version
  --stats         Show application stats
  --health        Run health check
  --test          Test configuration

Environment variables:
  BOT_TOKEN       Telegram bot token
  PORT            Server port (default: 3000)
  NODE_ENV        Environment (development/production)
        `);
        process.exit(0);
    }

    if (args.includes('--version') || args.includes('-v')) {
        console.log('Telegram Bot Application v1.0.0');
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (require.main === module) {
    handleCliArgs();
    main().catch(error => {
        console.error('üí• Failed to start application:', error);
        process.exit(1);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = {
    TelegramBotApp,
    main
};